<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>JavaScript 全局对象</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 9.00.8112.16450"></HEAD>
<BODY>
<DIV>
<P>全局属性和函数可用于所有内建的 JavaScript 对象。</P></DIV>
<DIV>
<H2>顶层函数（全局函数）</H2>
<P>FF: Firefox, IE: Internet Explorer</P>
<TABLE class=dataintable>
  <TBODY>
  <TR>
    <TH style="WIDTH: 30%">函数</TH>
    <TH style="WIDTH: 56%">描述</TH>
    <TH style="WIDTH: 7%">FF</TH>
    <TH style="WIDTH: 7%">IE</TH></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_decodeURI.html">decodeURI()</A></TD>
    <TD>解码某个编码的 URI。</TD>
    <TD>1</TD>
    <TD>5.5</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_decodeURIComponent.html">decodeURIComponent()</A></TD>
    <TD>解码一个编码的 URI 组件。</TD>
    <TD>1</TD>
    <TD>5.5</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_encodeURI.html">encodeURI()</A></TD>
    <TD>把字符串编码为 URI。</TD>
    <TD>1</TD>
    <TD>5.5</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_encodeURIComponent.html">encodeURIComponent()</A></TD>
    <TD>把字符串编码为 URI 组件。</TD>
    <TD>1</TD>
    <TD>5.5</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_escape.html">escape()</A></TD>
    <TD>对字符串进行编码。</TD>
    <TD>1</TD>
    <TD>3</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_eval.html">eval()</A></TD>
    <TD>计算 JavaScript 字符串，并把它作为脚本代码来执行。</TD>
    <TD>1</TD>
    <TD>3</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_getClass.html">getClass()</A></TD>
    <TD>返回一个 JavaObject 的 JavaClass。</TD>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_isFinite.html">isFinite()</A></TD>
    <TD>检查某个值是否为有穷大的数。</TD>
    <TD>1</TD>
    <TD>4</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_isNaN.html">isNaN()</A></TD>
    <TD>检查某个值是否是数字。</TD>
    <TD>1</TD>
    <TD>3</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_number.html">Number()</A></TD>
    <TD>把对象的值转换为数字。</TD>
    <TD>1</TD>
    <TD></TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_parseFloat.html">parseFloat()</A></TD>
    <TD>解析一个字符串并返回一个浮点数。</TD>
    <TD>1</TD>
    <TD>3</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_parseInt.html">parseInt()</A></TD>
    <TD>解析一个字符串并返回一个整数。</TD>
    <TD>1</TD>
    <TD>3</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_string.html">String()</A></TD>
    <TD>把对象的值转换为字符串。</TD>
    <TD>1</TD>
    <TD></TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_unescape.html">unescape()</A></TD>
    <TD>对由 escape() 编码的字符串进行解码。</TD>
    <TD>1</TD>
    <TD>3</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2>顶层属性（全局属性）</H2>
<P>FF: Firefox, IE: Internet Explorer</P>
<TABLE class=dataintable>
  <TBODY>
  <TR>
    <TH style="WIDTH: 30%">方法</TH>
    <TH style="WIDTH: 56%">描述</TH>
    <TH style="WIDTH: 7%">FF</TH>
    <TH style="WIDTH: 7%">IE</TH></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_infinity.html">Infinity</A></TD>
    <TD>代表正的无穷大的数值。</TD>
    <TD>1</TD>
    <TD>4</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_java.html">java</A></TD>
    <TD>代表 java.* 包层级的一个 JavaPackage。</TD>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_nan.html">NaN</A></TD>
    <TD>指示某个值是不是数字值。</TD>
    <TD>1</TD>
    <TD>4</TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_Packages.html">Packages</A></TD>
    <TD>根 JavaPackage 对象。</TD>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD><A 
      href="mk:@MSITStore:E:\wen\e\技术文档\api\API\W3C_Javascript_2010-07-13.chm::/js/jsref_undefined.html">undefined</A></TD>
    <TD>指示未定义的值。</TD>
    <TD>1</TD>
    <TD>5.5</TD></TR></TBODY></TABLE></DIV>
<DIV>
<H2>全局对象描述</H2>
<P>全局对象是预定义的对象，作为 JavaScript 
的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。</P>
<P>在顶层 JavaScript 代码中，可以用关键字 this 
引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。例如，当JavaScript 
代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 
代码中声明的所有变量都将成为全局对象的属性。</P>
<P>全局对象只是一个对象，而不是类。既没有构造函数，也无法实例化一个新的全局对象。</P>
<P>在 JavaScript 代码嵌入一个特殊环境中时，全局对象通常具有环境特定的属性。实际上，ECMAScript 
标准没有规定全局对象的类型，JavaScript 的实现或嵌入的 JavaScript 
都可以把任意类型的对象作为全局对象，只要该对象定义了这里列出的基本属性和函数。例如，在允许通过 LiveConnect 或相关的技术来脚本化 Java 的 
JavaScript 实现中，全局对象被赋予了这里列出的 java 和 Package 属性以及 getClass() 方法。而在客户端 JavaScript 
中，全局对象就是 Window 对象，表示允许 JavaScript 代码的 Web 浏览器窗口。</P>
<H3>例子</H3>
<P>在 JavaScript 核心语言中，全局对象的预定义属性都是不可枚举的，所有可以用 for/in 
循环列出所有隐式或显式声明的全局变量，如下所示：</P><PRE>var variables = "";

for (var name in this) 
{
variables += name + "&lt;br /&gt;";
document.write(variables);
}</PRE></DIV></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=gb2312">
<META name="GENERATOR" content="QuickCHM">
<TITLE>BOM基础</TITLE>
</HEAD>
<BODY>
<H2 
style="BORDER-BOTTOM: rgb(226,226,226) 1px solid; TEXT-ALIGN: center; PADDING-BOTTOM: 10px; WIDOWS: 2; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; MARGIN: 0px; PADDING-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; FONT-FAMILY: 'Microsoft Yahei', SimSun; WHITE-SPACE: normal; ORPHANS: 2; COLOR: rgb(0,0,0); FONT-SIZE: 22px; WORD-SPACING: 0px; PADDING-TOP: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px" 
class=title>用JavaScript读取和保存文件</H2>
<P 
style="BORDER-BOTTOM: rgb(204,204,204) 1px dashed; BORDER-LEFT: rgb(204,204,204) 1px dashed; PADDING-BOTTOM: 10px; WIDOWS: 2; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 2em; MARGIN: 0px; PADDING-LEFT: 10px; LETTER-SPACING: normal; PADDING-RIGHT: 10px; FONT-FAMILY: Verdana, 'Microsoft YaHei', SimSun; WHITE-SPACE: normal; ORPHANS: 2; COLOR: rgb(0,102,0); FONT-SIZE: 14px; BORDER-TOP: rgb(204,204,204) 1px dashed; FONT-WEIGHT: normal; BORDER-RIGHT: rgb(204,204,204) 1px dashed; WORD-SPACING: 0px; PADDING-TOP: 10px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-origin: initial; background-clip: initial; border-image: initial" 
class=summary>话说今天只是粗略浏览了一下 Proxy SwitchySharp的源码 ，就收获了不少东西，其中就包括本文要介绍的读取和保存文件。 
因为Google还不提供同步插件数据的功能，所以导入和导出插件配置…</P>
<DIV 
style="PADDING-BOTTOM: 0px; OVERFLOW-X: hidden; OVERFLOW-Y: hidden; WIDOWS: 2; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; MARGIN: 20px 0px; PADDING-LEFT: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; FONT: 14px/28px Verdana, 'Microsoft YaHei', SimSun; WHITE-SPACE: normal; ORPHANS: 2; COLOR: rgb(51,51,51); WORD-SPACING: 0px; PADDING-TOP: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px" 
class=content>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">&nbsp; 
话说今天只是粗略浏览了一下<A style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://code.google.com/p/switchysharp/">Proxy 
SwitchySharp的源码</A>，就收获了不少东西，其中就包括本文要介绍的读取和保存文件。<BR>因为Google还不提供同步插件数据的功能，所以导入和导出插件配置就必须和文件打交道了。而出于安全原因，只有IE才提供访问文件的API；但随着HTML 
5的到来，其他浏览器也纷纷支持了。<BR><BR>首先说读取文件。W3C提供了一些<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="http://www.w3.org/TR/FileAPI/">File API</A>，其中最重要的是<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://developer.mozilla.org/en/DOM/FileReader">FileReader</A>这个类。<BR><BR>先列出需要用到的HTML标签：</P><PRE style="BORDER-BOTTOM: rgb(204,204,204) 1px dashed; BORDER-LEFT: rgb(204,204,204) 1px dashed; PADDING-BOTTOM: 4px; LINE-HEIGHT: 20px; BACKGROUND-COLOR: rgb(248,248,248); MARGIN: 0px auto 10px 0px; PADDING-LEFT: 10px; WIDTH: 579px; PADDING-RIGHT: 4px; FONT-FAMILY: Verdana, 'Microsoft YaHei'; FONT-SIZE: 12px; BORDER-TOP: rgb(204,204,204) 3px solid; BORDER-RIGHT: rgb(204,204,204) 1px dashed; PADDING-TOP: 4px; background-origin: initial; background-clip: initial; border-image: initial">&lt;input type="file" id="file" onchange="handleFiles(this.files)"/&gt;</PRE>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">当选择了一个文件时，就会把包含这个文件的列表（一个FileList对象）作为参数传给handleFiles()函数了。<BR>这个FileList对象类似一个数组，可以知道文件的数目，而它的元素就是File对象了。<BR>从这个File对象可以获取name、size、lastModifiedDate和type等属性。<BR>把这个File对象传给FileReader对象的读取方法，就能读取文件了。<BR><BR>FileReader共有4种读取方法：</P>
<UL 
style="PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">readAsArrayBuffer(file)：将文件读取为<A 
  style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
  href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</A>。</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">readAsBinaryString(file)：将文件读取为二进制字符串</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">readAsDataURL(file)：将文件读取为<A 
  style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
  href="http://www.keakon.net/2010/02/02/%E5%8E%9F%E6%9D%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%98%E6%94%AF%E6%8C%81dataURI%E5%8D%8F%E8%AE%AE">Data 
  URL</A></LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">readAsText(file, 
  [encoding])：将文件读取为文本，encoding缺省值为'UTF-8'</LI></UL>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">此外，abort()方法可以停止读取文件。<BR><BR>FileReader对象在读取文件后，还需要进行处理。为了不阻塞当前线程，API采用了事件模型，可以注册这些事件：</P>
<UL 
style="PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">onabort：中断时触发</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">onerror：出错时触发</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">onload：文件成功读取完毕时触发</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">onloadend：文件读取完毕时触发，无论是否失败</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">onloadstart：文件开始读取时触发</LI>
  <LI 
  style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">onprogress：当文件读取时，周期性地触发</LI></UL>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px"><BR>有了这些方法以后，就可以处理文件了。<BR>先来试试读取文本文件：</P><PRE style="BORDER-BOTTOM: rgb(204,204,204) 1px dashed; BORDER-LEFT: rgb(204,204,204) 1px dashed; PADDING-BOTTOM: 4px; LINE-HEIGHT: 20px; BACKGROUND-COLOR: rgb(248,248,248); MARGIN: 0px auto 10px 0px; PADDING-LEFT: 10px; WIDTH: 579px; PADDING-RIGHT: 4px; FONT-FAMILY: Verdana, 'Microsoft YaHei'; FONT-SIZE: 12px; BORDER-TOP: rgb(204,204,204) 3px solid; BORDER-RIGHT: rgb(204,204,204) 1px dashed; PADDING-TOP: 4px; background-origin: initial; background-clip: initial; border-image: initial">function handleFiles(files) {
    if (files.length) {
        var file = files[0];
        var reader = new FileReader();
        if (/text\/\w+/.test(file.type)) {
            reader.onload = function() {
                $('&lt;pre&gt;' + this.result + '&lt;/pre&gt;').appendTo('body');
            }
            reader.readAsText(file);
        }
    }
}</PRE>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">这里的this.result实际上就是reader.result，也就是读取出来的文件内容。<BR>测试一下你会发现这个文件的内容被添加到网页中了。如果是用Chrome的话，必须把网页放在服务器上或插件里，file协议下会失败。<BR><BR>再来试试图片，因为浏览器可以直接显示Data 
URI协议的图片，所以这次就添加图片：</P><PRE style="BORDER-BOTTOM: rgb(204,204,204) 1px dashed; BORDER-LEFT: rgb(204,204,204) 1px dashed; PADDING-BOTTOM: 4px; LINE-HEIGHT: 20px; BACKGROUND-COLOR: rgb(248,248,248); MARGIN: 0px auto 10px 0px; PADDING-LEFT: 10px; WIDTH: 579px; PADDING-RIGHT: 4px; FONT-FAMILY: Verdana, 'Microsoft YaHei'; FONT-SIZE: 12px; BORDER-TOP: rgb(204,204,204) 3px solid; BORDER-RIGHT: rgb(204,204,204) 1px dashed; PADDING-TOP: 4px; background-origin: initial; background-clip: initial; border-image: initial">function handleFiles(files) {
    if (files.length) {
        var file = files[0];
        var reader = new FileReader();
        if (/text\/\w+/.test(file.type)) {
            reader.onload = function() {
                $('&lt;pre&gt;' + this.result + '&lt;/pre&gt;').appendTo('body');
            }
            reader.readAsText(file);
        } else if(/image\/\w+/.test(file.type)) {
            reader.onload = function() {
                $('&lt;img src="' + this.result + '"/&gt;').appendTo('body');
            }
            reader.readAsDataURL(file);
        }
    }
}</PRE>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px"><BR>其实input:file控件还支持选择多个文件：</P><PRE style="BORDER-BOTTOM: rgb(204,204,204) 1px dashed; BORDER-LEFT: rgb(204,204,204) 1px dashed; PADDING-BOTTOM: 4px; LINE-HEIGHT: 20px; BACKGROUND-COLOR: rgb(248,248,248); MARGIN: 0px auto 10px 0px; PADDING-LEFT: 10px; WIDTH: 579px; PADDING-RIGHT: 4px; FONT-FAMILY: Verdana, 'Microsoft YaHei'; FONT-SIZE: 12px; BORDER-TOP: rgb(204,204,204) 3px solid; BORDER-RIGHT: rgb(204,204,204) 1px dashed; PADDING-TOP: 4px; background-origin: initial; background-clip: initial; border-image: initial">&lt;input type="file" id="files" multiple="" onchange="handleFiles(this.files)"/&gt;</PRE>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">这样handleFiles()里就需要遍历处理files了。<BR><BR>如果只想读取部分数据的话，File对象还有webkitSlice()或mozSlice()方法，用于生成Blob对象。这个对象可以和File对象一样被FileReader读取。这2个方法接收3个参数：第1个参数是起始位置；第2个是结束位置，省略时则读到文件结尾；第3个是content 
type。<BR>例子可以参考<A style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="http://www.html5rocks.com/en/tutorials/file/dndfiles/">《Reading local 
files in JavaScript》</A>。<BR><BR>当然，除了导入数据和显示文件以外，它还可以用来做AJAX上传，代码可以参考<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://developer.mozilla.org/en/Using_files_from_web_applications">《Using 
files from web applications》</A>。<BR><BR><BR>接下来说保存文件。<BR>实际上<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="http://www.w3.org/TR/file-writer-api/">File API: 
Writer</A>提供了4个接口，但目前只有部分浏览器（Chrome 8+和Firefox 
4+）实现了BlobBuilder，其余接口都不可用。<BR>对于不支持的浏览器，可以使用<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://github.com/eligrey/BlobBuilder.js">BlobBuilder.js</A>和<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://github.com/eligrey/FileSaver.js">FileSaver.js</A>来获得支持。<BR>我研究了一下，发现了其中的奥秘。<BR><BR>BlobBuilder可以创建一个Blob对象。把这个Blob对象传递给<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://developer.mozilla.org/en/DOM/window.URL.createObjectURL">URL.createObjectURL()</A>方法，就可以拿到一个object 
URL。而这个object 
URL就是这个Blob对象的下载地址。<BR>拿到下载地址后，创建一个a元素，将下载地址赋值给href属性，文件名赋值给download属性（Chrome 
14+支持）。<BR>然后再创建一个click事件，交给这个a元素处理，就会导致浏览器开始下载这个Blob对象了。<BR>最后，用<A 
style="COLOR: rgb(0,66,118); TEXT-DECORATION: underline" 
href="https://developer.mozilla.org/en/DOM/window.URL.revokeObjectURL">URL.revokeObjectURL()</A>来释放这个object 
URL，通知浏览器可以不必继续引用这个文件了。<BR><BR>下面就是一段化简的代码：</P><PRE style="BORDER-BOTTOM: rgb(204,204,204) 1px dashed; BORDER-LEFT: rgb(204,204,204) 1px dashed; PADDING-BOTTOM: 4px; LINE-HEIGHT: 20px; BACKGROUND-COLOR: rgb(248,248,248); MARGIN: 0px auto 10px 0px; PADDING-LEFT: 10px; WIDTH: 579px; PADDING-RIGHT: 4px; FONT-FAMILY: Verdana, 'Microsoft YaHei'; FONT-SIZE: 12px; BORDER-TOP: rgb(204,204,204) 3px solid; BORDER-RIGHT: rgb(204,204,204) 1px dashed; PADDING-TOP: 4px; background-origin: initial; background-clip: initial; border-image: initial">var BlobBuilder = BlobBuilder || WebKitBlobBuilder || MozBlobBuilder;
var URL = URL || webkitURL || window;

function saveAs(blob, filename) {
    var type = blob.type;
    var force_saveable_type = 'application/octet-stream';
    if (type &amp;&amp; type != force_saveable_type) { // 强制下载，而非在浏览器中打开
        var slice = blob.slice || blob.webkitSlice || blob.mozSlice;
        blob = slice.call(blob, 0, blob.size, force_saveable_type);
    }

    var url = URL.createObjectURL(blob);
    var save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
    save_link.href = url;
    save_link.download = filename;

    var event = document.createEvent('MouseEvents');
    event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    save_link.dispatchEvent(event);
    URL.revokeObjectURL(url);
}

var bb = new BlobBuilder;
bb.append('Hello, world!');
saveAs(bb.getBlob('text/plain;charset=utf-8'), 'hello world.txt');</PRE>
<P 
style="PADDING-BOTTOM: 0px; MARGIN: 10px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px">测试时会提示保存一个文本文件。Chrome需要把网页放在服务器上或插件里。</P></DIV>
</BODY>
</HTML>

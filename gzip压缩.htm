<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>服务器启用gzip压缩</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 10.00.9200.16521"></HEAD>
<BODY>
<P>服务器启用gzip压缩</P>
<H2 class=m4_box4 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(51,51,51); PADDING-BOTTOM: 20px; TEXT-ALIGN: center; PADDING-TOP: 18px; FONT: bold 22px Arial, Helvetica, sans-serif, 宋体; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Apache服务器中如何启用gzip压缩</H2>
<DIV class=m4_box6 
style="WHITE-SPACE: normal; TEXT-TRANSFORM: none; WORD-SPACING: 0px; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 13px/24px Verdana, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px auto; LETTER-SPACING: normal; PADDING-RIGHT: 0px; WIDTH: 600px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><B>一、gzip介绍</B><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR>Gzip是一种流行的文件压缩算法，现在的应用十分广泛，尤其是在Linux平台。当应用Gzip压缩到一个纯文本文件时，效果是非常明显的，大约可以减少70％以上的文件大小。这取决于文件中的内容。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
利用Apache中的Gzip模块，我们可以使用Gzip压缩算法来对Apache服务器发布的网页内容进行压缩后再传输到客户端浏览器。这样经过压缩后实际上降低了网络传输的字节数，最明显的好处就是可以加快网页加载的速度。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
网页加载速度加快的好处不言而喻，除了节省流量，改善用户的浏览体验外，另一个潜在的好处是Gzip与搜索引擎的抓取工具有着更好的关系。例如 
Google就可以通过直接读取gzip文件来比普通手工抓取更快地检索网页。在Google网站管理员工具（Google Webmaster 
Tools）中你可以看到，sitemap.xml.gz 是直接作为Sitemap被提交的。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
而这些好处并不仅仅限于静态内容，PHP动态页面和其他动态生成的内容均可以通过使用Apache压缩模块压缩，加上其他的性能调整机制和相应的服务器端缓存规则，这可以大大提高网站的性能。因此，对于部署在Linux服务器上的PHP程序，在服务器支持的情况下，我们建议你开启使用Gzip 
Web压缩。<BR><BR><B>二、Web服务器处理HTTP压缩的过程如下：</B><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>&nbsp;&nbsp;&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR>1. 
Web服务器接收到浏览器的HTTP请求后，检查浏览器是否支持HTTP压缩（Accept-Encoding 信息）；<BR>&nbsp;&nbsp;&nbsp; 
2. 如果浏览器支持HTTP压缩，Web服务器检查请求文件的后缀名；<BR>&nbsp;&nbsp;&nbsp; 3. 
如果请求文件是HTML、CSS等静态文件，Web服务器到压缩缓冲目录中检查是否已经存在请求文件的最新压缩文件；<BR>&nbsp;&nbsp;&nbsp; 4. 
如果请求文件的压缩文件不存在，Web服务器向浏览器返回未压缩的请求文件，并在压缩缓冲目录中存放请求文件的压缩文件；<BR>&nbsp;&nbsp;&nbsp; 
5. 如果请求文件的最新压缩文件已经存在，则直接返回请求文件的压缩文件；<BR>&nbsp;&nbsp;&nbsp; 6. 
如果请求文件是动态文件，Web服务器动态压缩内容并返回浏览器，压缩内容不存放到压缩缓存目录中。<BR><BR><STRONG>下面是两个演示图：</STRONG><BR><STRONG>未使用Gzip：</STRONG><BR><A 
style="COLOR: rgb(51,51,51); TEXT-DECORATION: underline" 
href="http://www.xmydlinux.org/wp-content/uploads/2011/08/image2.png" 
rel=example4><IMG 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" 
src="http://upload.server110.com/image/20130815/162A3I16-0.png"><BR></A><BR><STRONG>开启使用Gzip后：</STRONG><BR><A 
style="COLOR: rgb(51,51,51); TEXT-DECORATION: underline" 
href="http://www.xmydlinux.org/wp-content/uploads/2011/08/image3.png" 
rel=example4><IMG 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" 
src="http://upload.server110.com/image/20130815/162A32b1-1.png"><BR></A><BR><B>三<STRONG>、让我们开始吧！</STRONG></B><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR>Apache上利用Gzip压缩算法进行压缩的模块有两种：mod_gzip 
和mod_deflate。要使用Gzip 
Web压缩，请首先确定你的服务器开启了对这两个组件之一的支持。在Linux服务器上，现在已经有越来越多的空间商开放了对它们的支持，有的甚至是同时 
支持这两个模块的。例如目前Godaddy、Bluehost及DreamHosts等空间商的服务器都已同时支持mod_gzip 
和mod_deflate。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
虽然使用Gzip同时也需要客户端浏览器的支持，不过不用担心，目前大部分浏览器都已经支持Gzip了，如IE、Mozilla 
Firefox、Opera、Chrome等。<BR>&nbsp;&nbsp;&nbsp;&nbsp; 
通过查看HTTP头，我们可以快速判断使用的客户端浏览器是否支持接受gzip压缩。若发送的HTTP头中出现以下信息，则表明你的浏览器支持接受相应的gzip压缩：<BR><STRONG>Accept-Encoding:&nbsp;gzip</STRONG>&nbsp;支持mod_gzip<BR><STRONG>Accept-Encoding:&nbsp;deflate</STRONG>&nbsp;支持mod_deflate<BR><STRONG>Accept-Encoding:&nbsp;gzip,deflate</STRONG>&nbsp;同时支持mod_gzip&nbsp;和mod_deflate<BR>&nbsp;&nbsp;&nbsp;&nbsp; 
如果服务器开启了对Gzip组件的支持，那么我们就可以在http.conf或.htaccess里面进行定制，下面是一个.htaccess配置的简单实例：<BR><PRE class="brush:text plain" style="OVERFLOW: auto; FONT-SIZE: 12px; FONT-FAMILY: 'Courier New', monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1em; PADDING-RIGHT: 0px; WIDTH: 594px; BACKGROUND-COLOR: rgb(247,247,247)"># mod_gzip：
&lt;ifModule mod_gzip.c&gt;
mod_gzip_on Yes
mod_gzip_dechunk Yes
mod_gzip_item_include file \.(html?|txt|css|js|php|pl)$
mod_gzip_item_include handler ^cgi-script$
mod_gzip_item_include mime ^text/.*
mod_gzip_item_include mime ^application/x-javascript.*
mod_gzip_item_exclude rspheader ^Content-Encoding:.*gzip.*
&lt;ifModule&gt;
# mod_deflate：
&lt;ifmodule mod_deflate.c&gt;
DeflateCompressionLevel 6 #压缩率, 6是建议值.
AddOutputFilterByType DEFLATE text/plain
AddOutputFilterByType DEFLATE text/html
AddOutputFilterByType DEFLATE text/xml
AddOutputFilterByType DEFLATE text/css
AddOutputFilterByType DEFLATE text/javascript
AddOutputFilterByType DEFLATE application/xhtml+xml
AddOutputFilterByType DEFLATE application/xml
AddOutputFilterByType DEFLATE application/rss+xml
AddOutputFilterByType DEFLATE application/atom_xml
AddOutputFilterByType DEFLATE application/x-javascript
AddOutputFilterByType DEFLATE application/x-httpd-php
AddOutputFilterByType DEFLATE image/svg+xml
&lt;/ifmodule&gt;</PRE><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
里面的文件MIME类型可以根据自己情况添加，至于PDF 
、图片、音乐文档之类的这些本身都已经高度压缩格式，重复压缩的作用不大，反而可能会因为增加CPU的处理时间及浏览器的渲染问题而降低性能。所以就没必要再通过Gzip压缩。通过以上设置后再查看返回的HTTP头，出现以下信息则表明返回的数据已经过压缩。即网站程序所配置的Gzip压缩已生效。<BR><STRONG>Content-Encoding:&nbsp;gzip</STRONG><BR>注：不管使用mod_gzip 
还是mod_deflate，此处返回的信息都一样。因为它们都是实现的gzip压缩方式。<BR>&nbsp;&nbsp;&nbsp;&nbsp; 
除此之外，还可以通过一些在线检测工具（如：http://tool.chinaz.com/Gzips/）来检测你的网站内容是否已经过Gzip压缩。<BR><BR><B><STRONG>四、mod_gzip 
和mod_deflate的主要区别是什么？使用哪个更好呢？</STRONG></B><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR>首先一个区别是安装它们的Apache 
Web服务器版本的差异。Apache 1.x系列没有内建网页压缩技术，所以才去用额外的第三方mod_gzip 模块来执行压缩。而Apache 
2.x官方在开发的时候，就把网页压缩考虑进去，内建了mod_deflate 
这个模块，用以取代mod_gzip。虽然两者都是使用的Gzip压缩算法，它们的运作原理是类似的。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
第二个区别是压缩质量。mod_deflate 压缩速度略快而mod_gzip 的压缩比略高。一般默认情况下，mod_gzip 会比mod_deflate 
多出4%~6％的压缩量。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
那么，为什么使用mod_deflate？第三个区别是对服务器资源的占用。一般来说mod_gzip 对服务器CPU的占用要高一些。mod_deflate 
是专门为确保服务器的性能而使用的一个压缩模块，mod_deflate 需要较少的资源来压缩文件。这意味着在高流量的服务器，使用mod_deflate 
可能会比mod_gzip 加载速度更快。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
不太明白？简而言之，如果你的网站，每天不到1000独立访客，想要加快网页的加载速度，就使用mod_gzip。虽然会额外耗费一些服务器资源， 
但也是值得的。如果你的网站每天超过1000独立访客，并且使用的是共享的虚拟主机，所分配系统资源有限的话，使用mod_deflate 
将会是更好的选择。<BR>&nbsp;&nbsp;&nbsp;&nbsp; 另外，从Apache 2.0.45开始，mod_deflate 
可使用DeflateCompressionLevel 
指令来设置压缩级别。该指令的值可为1（压缩速度最快，最低的压缩质量）至9（最慢的压缩速度，压缩率最高）之间的整数，其默认值为6（压缩速度和压缩质 
量较为平衡的值）。这个简单的变化更是使得mod_deflate 可以轻松媲美mod_gzip 的压缩。<BR>P.S. 
对于没有启用以上两种Gzip模块的虚拟空间，还可以退而求其次使用php的zlib函数库（同样需要查看服务器是否支持）来压缩文件，只是这种方法使用起来比较麻烦，而且一般会比较耗费服务器资源，请根据情况慎重使用。<BR><BR><B>五、效果截图</B><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR>启用之前：<BR><IMG 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" 
src="http://upload.server110.com/image/20130815/162A3O50-2.png"><BR>启用之后：<BR><IMG 
style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" 
src="http://upload.server110.com/image/20130815/162A33035-3.png"></DIV></BODY></HTML>

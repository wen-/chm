<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=gb2312">
<META name="GENERATOR" content="QuickCHM">
<TITLE>ios-webview</TITLE>
</HEAD>
<BODY>
<P>ios-webview</P><PRE class="lang-c prettyprint prettyprinted" style='FONT-SIZE: 13px; OVERFLOW: auto; WORD-WRAP: normal; BORDER-TOP: 0px; FONT-FAMILY: Consolas, Menlo, Monaco, "Lucida Console", "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Courier New", monospace, sans-serif; BORDER-RIGHT: 0px; WIDTH: auto; VERTICAL-ALIGN: baseline; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(57,51,24); PADDING-BOTTOM: 5px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 5px; PADDING-LEFT: 5px; BORDER-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 1em; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 5px; MAX-HEIGHT: 600px; BACKGROUND-COLOR: rgb(239,240,241); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal; font-stretch: inherit; font-variant-numeric: inherit'><CODE style='FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: Consolas, Menlo, Monaco, "Lucida Console", "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Courier New", monospace, sans-serif; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(239,240,241); font-stretch: inherit'><SPAN class=pun style="BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(48,51,54); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit">[</SPAN><SPAN class=pln style="BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(48,51,54); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit">self</SPAN><SPAN class=pun style="BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(48,51,54); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit">.</SPAN><SPAN class=pln style="BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(48,51,54); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit">uiwebview reload</SPAN><SPAN class=pun style="BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(48,51,54); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit">];//刷新</SPAN></CODE></PRE>
<P><STRONG><FONT color=#ff0000 
size=7>//uiwebview</FONT></STRONG></P>
<P><STRONG><BR>//&nbsp; 邀请奖励js交互.h<BR>//&nbsp; 飞燕云盘<BR>//<BR>//&nbsp; Created by 
黄文雄 on 2017/10/22.<BR>//&nbsp; Copyright ? 2017年 黄文雄. All rights 
reserved.<BR>//<BR>#import &lt;UIKit/UIKit.h&gt;<BR>#import 
&lt;WebKit/WebKit.h&gt;<BR>#import 
&lt;JavaScriptCore/JavaScriptCore.h&gt;<BR>#import "MBProgressHUD.h"<BR>#import 
"SettingsViewController.h"</STRONG></P>
<P><STRONG>@protocol JsDelegate &lt;JSExport&gt;</STRONG></P>
<P><STRONG>// 显示提示信息<BR>- (void)showToast:(NSString *)params;</STRONG></P>
<P><STRONG>// 返回<BR>- (void)goBack;</STRONG></P>
<P><STRONG>// 跳转页<BR>- (void)gotoPage:(NSString *)address;</STRONG></P>
<P><STRONG>// 结束加载<BR>- (void)loadFin;</STRONG></P>
<P><STRONG>// 退出登录<BR>- (void)logout;</STRONG></P>
<P><STRONG>@end</STRONG></P>
<P><STRONG>// 此模型用于注入JS的模型，这样就可以通过模型来调用方法。<BR>@interface 通用js交互 : 
NSObject</STRONG></P>
<P><STRONG>@property (nonatomic, strong) UIViewController&nbsp; 
*viewController;<BR>@property (nonatomic, strong) UINavigationController&nbsp; 
*navigationController;<BR>@property (nonatomic, strong) JSContext 
*jsContext;<BR>@property (nonatomic, strong) WKWebView *webView;<BR>@property 
(nonatomic, strong) MBProgressHUD *HUD;<BR>@property (nonatomic, assign) 
NSString *token;</STRONG></P>
<P><STRONG>@end</STRONG></P>
<P><STRONG></STRONG>&nbsp;</P>
<P><STRONG>//&nbsp; 邀请奖励js交互.m<BR>//&nbsp; 飞燕开发服<BR>//<BR>//&nbsp; Created by 
黄文雄 on 2017/10/22.<BR>//&nbsp; Copyright ? 2017年 黄文雄. All rights 
reserved.<BR>//</STRONG></P>
<P><STRONG>#import &lt;Foundation/Foundation.h&gt;<BR>#import 
"通用js交互.h"<BR>#import &lt;JavaScriptCore/JavaScriptCore.h&gt;<BR>#import 
"MBProgressHUD.h"<BR>#import "SettingsViewController.h"</STRONG></P>
<P><STRONG>@interface 通用js交互() &lt;JsDelegate&gt;</STRONG></P>
<P><STRONG>@end</STRONG></P>
<P><STRONG>@implementation 通用js交互</STRONG></P>
<P><STRONG>- (void)showToast:(NSString *)params {<BR>&nbsp;&nbsp;&nbsp; 
NSLog(@"参数为：%@", params);<BR>&nbsp;&nbsp;&nbsp; MBProgressHUD *hud = 
[[MBProgressHUD alloc] initWithView:self.webView];<BR>&nbsp;&nbsp;&nbsp; 
[self.webView addSubview:hud];<BR>&nbsp;&nbsp;&nbsp; hud.mode = 
MBProgressHUDModeText;<BR>&nbsp;&nbsp;&nbsp; hud.labelText = 
params;<BR>&nbsp;&nbsp;&nbsp; hud.margin = 10.f;<BR>&nbsp;&nbsp;&nbsp; 
hud.yOffset = 180;<BR>&nbsp;&nbsp;&nbsp; hud.minSize = CGSizeMake(140, 
60);<BR>&nbsp;&nbsp;&nbsp; hud.removeFromSuperViewOnHide = 
YES;<BR>&nbsp;&nbsp;&nbsp; [hud show:YES];<BR>&nbsp;&nbsp;&nbsp; [hud hide:YES 
afterDelay:0.8];<BR>}</STRONG></P>
<P><STRONG>- (void)goBack {<BR>&nbsp;&nbsp;&nbsp; 
dispatch_sync(dispatch_get_main_queue(), 
^{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [self.navigationController 
popViewControllerAnimated:YES];<BR>&nbsp;&nbsp;&nbsp; });<BR>}</STRONG></P>
<P><STRONG>- (void)gotoPage:(NSString *)address{<BR>&nbsp;&nbsp;&nbsp; NSString 
*newurl = [address 
stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];<BR>&nbsp;&nbsp;&nbsp; 
NSString *bodyShare = [NSString stringWithFormat: @"token=%@", 
self.token];<BR>&nbsp;&nbsp;&nbsp; NSMutableURLRequest *request = 
[[NSMutableURLRequest alloc]initWithURL: [NSURL URLWithString:newurl] 
cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData 
timeoutInterval:60];<BR>&nbsp;&nbsp;&nbsp; request.HTTPMethod = 
@"POST";<BR>&nbsp;&nbsp;&nbsp; request.HTTPBody = [bodyShare dataUsingEncoding: 
NSUTF8StringEncoding];<BR>&nbsp;&nbsp;&nbsp; [self.webView loadRequest: 
request];<BR>}</STRONG></P>
<P><STRONG>- (void)loadFin {<BR>&nbsp;&nbsp;&nbsp; 
NSLog(@"页面加载完成");<BR>&nbsp;&nbsp;&nbsp; [_HUD hide:YES];<BR>}</STRONG></P>
<P><STRONG>- (void)logout {<BR>&nbsp;&nbsp;&nbsp; 
TTAlertNoTitle(@"您的帐号已在其他地方登录，请重新登录");<BR>&nbsp;&nbsp;&nbsp; 
[SettingsViewController 退出];<BR>}</STRONG></P>
<P><STRONG>@end<BR></P>
<P></STRONG><STRONG></STRONG>&nbsp;</P>
<P>&nbsp;</P>
<P><STRONG>存在多个页面js交互的情况下， 要注意修改不同的协议代理（@protocol <FONT 
color=#ff0000>JavaScriptObjectiveCDelegate </FONT>&lt;JSExport&gt;）</STRONG></P>
<P>&nbsp;</P>
<P>//<BR>//&nbsp; js交互.h<BR>//&nbsp; 飞燕云盘<BR>//<BR>//&nbsp; Created by 黄文雄 on 
2017/8/1.<BR>//&nbsp; Copyright ? 2017年 黄文雄. All rights reserved.<BR>//</P>
<P>#import &lt;UIKit/UIKit.h&gt;<BR>#import 
&lt;JavaScriptCore/JavaScriptCore.h&gt;</P>
<P>@protocol JavaScriptObjectiveCDelegate &lt;JSExport&gt;</P>
<P>// JS调用此方法来调用OC的系统相册方法<BR>- (void)callSystemCamera;<BR>// 
在JS中调用时，函数名应该为showAlertMsg(arg1, arg2)<BR>// 这里是只两个参数的。<BR>- 
(void)showAlert:(NSString *)title msg:(NSString *)msg;<BR>// 通过JSON传过来<BR>- 
(void)callWithDict:(NSDictionary *)params;<BR>// 
JS调用Oc，然后在OC中通过调用JS方法来传值给JS。<BR>- 
(void)jsCallObjcAndObjcCallJsWithDict:(NSDictionary *)params;</P>
<P>@end<BR>// 此模型用于注入JS的模型，这样就可以通过模型来调用方法。<BR>@interface js交互模型 : NSObject 
&lt;JavaScriptObjectiveCDelegate&gt;</P>
<P>@property (nonatomic, weak) JSContext *jsContext;<BR>@property (nonatomic, 
weak) UIWebView *webView;</P>
<P>@end</P>
<P>@implementation js交互模型</P>
<P>- (void)callWithDict:(NSDictionary *)params {<BR>&nbsp;&nbsp;&nbsp; 
NSLog(@"Js调用了OC的方法，参数为：%@", params);<BR>}</P>
<P>// Js调用了callSystemCamera<BR>- (void)callSystemCamera {<BR>&nbsp;&nbsp;&nbsp; 
NSLog(@"JS调用了OC的方法，调起系统相册");<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; // 
JS调用OC后，又通过OC调用JS，但是这个是没有传参数的<BR>&nbsp;&nbsp;&nbsp; JSValue *jsFunc = 
self.jsContext[@"jsFunc"];<BR>&nbsp;&nbsp;&nbsp; [jsFunc 
callWithArguments:nil];<BR>}</P>
<P>- (void)jsCallObjcAndObjcCallJsWithDict:(NSDictionary *)params 
{<BR>&nbsp;&nbsp;&nbsp; NSLog(@"jsCallObjcAndObjcCallJsWithDict was called, 
params is %@", params);<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; // 
调用JS的方法<BR>&nbsp;&nbsp;&nbsp; JSValue *jsParamFunc = 
self.jsContext[@"jsParamFunc"];<BR>&nbsp;&nbsp;&nbsp; [jsParamFunc 
callWithArguments:@[@{@"age": @10, @"name": @"lili", @"height": 
@158}]];<BR>}</P>
<P>- (void)showAlert:(NSString *)title msg:(NSString *)msg 
{<BR>&nbsp;&nbsp;&nbsp; dispatch_async(dispatch_get_main_queue(), 
^{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIAlertView *a =       [[UIAlertView 
alloc] initWithTitle:title message:msg delegate:nil cancelButtonTitle:@"Ok" 
otherButtonTitles:nil, nil];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [a 
show];<BR>&nbsp;&nbsp;&nbsp; });<BR>}</P>
<P>- (void)openImg:(NSDictionary *)params {<BR>&nbsp;&nbsp;&nbsp; 
NSLog(@"Js调用了OC的方法，参数为：%@", params);<BR>}</P>
<P>@end</P>
<P><BR>@interface js交互 : UIViewController</P>
<P><BR>@end<BR></P>
<P>//<BR>//&nbsp; 动态控制器.m<BR>//&nbsp; 飞燕云盘<BR>//<BR>//&nbsp; Created by 黄文雄 on 
2017/8/1.<BR>//&nbsp; Copyright ? 2017年 黄文雄. All rights reserved.<BR>//</P>
<P>#import &lt;SVProgressHUD.h&gt;<BR>#import "动态控制器.h"<BR>#import 
"js交互.h"<BR>#import "域名管理.h"<BR>#import "登录数据模型.h"<BR>#import 
"MJRefresh.h"<BR>#import "RealtimeSearchUtil.h"<BR>#import 
"UIViewController+SearchController.h"</P>
<P>@interface 动态控制器 ()&lt;UIWebViewDelegate&gt;</P>
<P>@property (nonatomic, strong) UIWebView *webView;<BR>@property (nonatomic, 
strong) JSContext *jsContext;</P>
<P>@end</P>
<P>@implementation 动态控制器</P>
<P>- (void)viewDidLoad {<BR>&nbsp;&nbsp;&nbsp; [super 
viewDidLoad];<BR>&nbsp;&nbsp;&nbsp; [self.view 
addSubview:self.webView];<BR>&nbsp;&nbsp;&nbsp; [self 
setupSearchController];<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; __weak UIScrollView *scrollView =  
   self.webView.scrollView;<BR>&nbsp;&nbsp;&nbsp; // 
添加下拉刷新控件<BR>&nbsp;&nbsp;&nbsp; scrollView.mj_header=   [MJRefreshNormalHeader 
headerWithRefreshingBlock:^{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
[_webView reload];<BR>&nbsp;&nbsp;&nbsp; }];<BR>&nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp; //[SVProgressHUD 
showWithStatus:@"数据加载中"];<BR>&nbsp;&nbsp;&nbsp; //[self 
increateProgress];<BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>static float progressValue = 0.0f;<BR>- 
(void)increateProgress<BR>{<BR>&nbsp;&nbsp;&nbsp; progressValue += 
0.1;<BR>&nbsp;&nbsp;&nbsp; [SVProgressHUD showProgress:progressValue 
status:@"加载中"];<BR>&nbsp;&nbsp;&nbsp; if (progressValue &lt; 1) 
{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [self 
performSelector:@selector(increateProgress) withObject:nil 
afterDelay:0.3];<BR>&nbsp;&nbsp;&nbsp; 
}else{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [self 
performSelector:@selector(dismiss:) withObject:nil 
afterDelay:0.4];<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>- (IBAction)dismiss:(id)sender {<BR>&nbsp;&nbsp;&nbsp; [SVProgressHUD 
dismiss];<BR>}</P>
<P>- (UIWebView *)webView {<BR>&nbsp;&nbsp;&nbsp; 登录数据模型 *登录信息 = [登录数据模型 
new];<BR>&nbsp;&nbsp;&nbsp; NSData *数据 = [[NSUserDefaults standardUserDefaults] 
objectForKey:@"登录信息"];<BR>&nbsp;&nbsp;&nbsp; 登录信息 = [NSKeyedUnarchiver 
unarchiveObjectWithData:数据];<BR>&nbsp;&nbsp;&nbsp; NSDictionary *参数 = 
@{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
@"token":登录信息.令牌<BR>&nbsp;&nbsp;&nbsp; };<BR>&nbsp;&nbsp;&nbsp; if (_webView == 
nil) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _webView =     [[UIWebView 
alloc] 
initWithFrame:self.view.bounds];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_webView.scalesPageToFit = YES;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //NSURL *url = 
   [[NSBundle mainBundle] URLForResource:@"test" 
withExtension:@"html"];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//NSURLRequest *request = [NSURLRequest 
requestWithURL:url];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NSString *uu =   
 域名管理.动态首页;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //NSString *url = 
@"<A 
href="http://192.168.2.173">http://192.168.2.173</A>";<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//NSString *url = [NSString stringWithFormat:@"<A 
href="http://192.168.2.173?token=%">http://192.168.2.173?token=%</A>@", 
登录信息.令牌];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //NSString *url = @"<A 
href="https://apidev.feiyan.world/api/">https://apidev.feiyan.world/api/</A>动态/首页";<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//NSString *url = [NSString stringWithFormat:@"<A 
href="https://apidev.feiyan.world/api/">https://apidev.feiyan.world/api/</A>动态/首页?token=%@", 
登录信息.令牌];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NSString *url = 
域名管理.动态首页;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url = [url 
stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
NSLog(@"登录<A 
href='%@",url'  ,url??>url:%@",url</A>);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
/*get*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //NSURLRequest *request = 
[NSURLRequest requestWithURL:[NSURL 
URLWithString:url]];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
/*post*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NSString *bodyShare = 
[NSString stringWithFormat: @"token=%@", 
登录信息.令牌];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NSMutableURLRequest 
*request = [[NSMutableURLRequest alloc]initWithURL: [NSURL 
URLWithString:url]];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [request 
setHTTPMethod: @"POST"];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [request 
setHTTPBody: [bodyShare dataUsingEncoding: 
NSUTF8StringEncoding]];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
NSLog(@"登录参数:%@",bodyShare);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
[_webView loadRequest: request];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _webView.delegate = 
self;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; 
}<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; return _webView;<BR>}</P>
<P>//#pragma mark - UIWebViewDelegate<BR>- (void)webViewDidFinishLoad:(UIWebView 
*)webView {<BR>&nbsp;&nbsp;&nbsp; self.jsContext = [webView 
valueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"];<BR>&nbsp;&nbsp;&nbsp; 
// 通过模型调用方法，这种方式更好些。<BR>&nbsp;&nbsp;&nbsp; js交互模型 *model&nbsp; = [[js交互模型 alloc] 
init];<BR>&nbsp;&nbsp;&nbsp; self.jsContext[@"OCModel"] = 
model;<BR>&nbsp;&nbsp;&nbsp; model.jsContext = 
self.jsContext;<BR>&nbsp;&nbsp;&nbsp; model.webView = 
self.webView;<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; self.jsContext.exceptionHandler = 
  ^(JSContext *context, JSValue *exceptionValue) 
{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.exception = 
exceptionValue;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NSLog(@"异常信息：%@", 
exceptionValue);<BR>&nbsp;&nbsp;&nbsp; };<BR>}</P>
<P>- (void)webViewDidStartLoad:(UIWebView *)webView {<BR>&nbsp;&nbsp;&nbsp; 
NSLog(@"开始加载：");<BR>}</P>
<P>-(void)webView:(UIWebView *)webView didFailLoadWithError:(NSError 
*)error{<BR>&nbsp;&nbsp;&nbsp; NSLog(@"absoluteString == <A 
href='mailto:%@",webView.request.URL.absoluteString'  ,webView.request.URL.absoluteString??>%@",webView.request.URL.absoluteString</A>);<BR>&nbsp;&nbsp;&nbsp; 
[SVProgressHUD showErrorWithStatus:@"网络错误"];<BR>}</P>
<P>#pragma mark webview每次加载之前都会调用这个方法<BR>// 如果返回NO，代表不允许加载这个请求<BR>- 
(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest 
*)request navigationType:(UIWebViewNavigationType)navigationType 
{<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; return YES;<BR>}</P>
<P>&nbsp;</P>
<P>- (void)didReceiveMemoryWarning {<BR>&nbsp;&nbsp;&nbsp; [super 
didReceiveMemoryWarning];<BR>&nbsp;&nbsp;&nbsp; // Dispose of any resources that 
can be recreated.<BR>}</P>
<P><BR>- (void)cancelButtonClicked<BR>{<BR>&nbsp;&nbsp;&nbsp; 
[[RealtimeSearchUtil currentUtil] realtimeSearchStop];<BR>}</P>
<P>- (void)searchTextChangeWithString:(NSString 
*)aString<BR>{<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>#pragma mark - private</P>
<P>- (void)setupSearchController<BR>{<BR>&nbsp;&nbsp;&nbsp; [self 
enableSearchController];<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp; UISearchBar *searchBar = 
self.searchController.searchBar;<BR>&nbsp;&nbsp;&nbsp; [self.view 
addSubview:searchBar];<BR>&nbsp;&nbsp;&nbsp; self.webView.frame = CGRectMake(0, 
searchBar.frame.size.height, 
self.view.frame.size.width,self.view.frame.size.height - 
(searchBar.frame.size.height + self.tabBarController.tabBar.frame.size.height + 
self.navigationController.navigationBar.frame.size.height + [UIApplication 
sharedApplication].statusBarFrame.size.height));<BR>}</P>
<P>#pragma mark - public</P>
<P>-(void)refresh<BR>{<BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>-(void)refreshDataSource<BR>{<BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>- (void)isConnect:(BOOL)isConnect{<BR>&nbsp;&nbsp;&nbsp; if (!isConnect) 
{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; 
}<BR>&nbsp;&nbsp;&nbsp; else{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>- 
(void)networkChanged:(EMConnectionState)connectionState<BR>{<BR>&nbsp;&nbsp;&nbsp; 
if (connectionState == EMConnectionDisconnected) 
{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; 
}<BR>&nbsp;&nbsp;&nbsp; else{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp; }<BR>}</P>
<P><BR>- (void)发表动作 {<BR>&nbsp;&nbsp;&nbsp; <BR>}</P>
<P>@end<BR></P>
<P>&nbsp;</P>
<P><STRONG><FONT size=7>//WKWebView</FONT></STRONG></P>
<P><STRONG>需导入webkit.formawork</STRONG></P>
<P>&nbsp;</P>
<P>&nbsp;</P>
</BODY>
</HTML>

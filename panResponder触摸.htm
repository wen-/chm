<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=gb2312">
<META name="GENERATOR" content="QuickCHM">
<TITLE>panResponder触摸</TITLE>
</HEAD>
<BODY>
<P>panResponder触摸</P>
<DIV class=article_title 
style='FONT-SIZE: 12px; MARGIN-BOTTOM: 21px; FONT-FAMILY: "microsoft yahei"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal'><SPAN 
class="ico ico_type_Original" 
style="HEIGHT: 19px; WIDTH: 19px; VERTICAL-ALIGN: middle; BACKGROUND-IMAGE: url(../images/skin-type-icon.png); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px 0px; DISPLAY: inline-block; MARGIN-RIGHT: 10px"></SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>
<H1 
style="FONT-SIZE: 18px; VERTICAL-ALIGN: middle; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: inline-block; PADDING-RIGHT: 0px"><SPAN 
class=link_title><A style="TEXT-DECORATION: none; COLOR: rgb(0,0,0)" 
href="http://blog.csdn.net/njafei/article/details/76551176">panResponder详解及Demo</A></SPAN></H1></DIV>
<DIV class="article_manage clearfix" 
style="OVERFLOW: hidden; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(237,237,237) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(153,153,153); PADDING-BOTTOM: 5px; TEXT-ALIGN: right; PADDING-TOP: 0px; FONT: 12px/22px Arial; PADDING-LEFT: 20px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px -20px 10px; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 20px; TEXT-INDENT: 0px; font-stretch: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial">
<DIV class=article_l style="WIDTH: 934px; FLOAT: left"><SPAN 
class=link_categories style="FLOAT: left; MARGIN: 0px 0px 0px 5px">标签：<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" 
style="TEXT-DECORATION: none; COLOR: rgb(200,131,38); DISPLAY: inline-block; MARGIN-RIGHT: 10px" 
href="http://www.csdn.net/tag/react-native" target=_blank>react-native</A><A 
onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" 
style="TEXT-DECORATION: none; COLOR: rgb(200,131,38); DISPLAY: inline-block; MARGIN-RIGHT: 10px" 
href="http://www.csdn.net/tag/panResopnd" 
target=_blank>panResopnd</A></SPAN></DIV>
<DIV class=article_r><SPAN class=link_postdate 
style="MARGIN: 0px 16px 0px 0px">2017-08-01 19:02</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN title=阅读次数 class=link_view 
style="BACKGROUND: url(../images/skin-type-icon.png) no-repeat 0px -25px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 24px; MARGIN: 0px 16px 0px 5px; DISPLAY: inline-block; PADDING-RIGHT: 0px">73人阅读</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN title=评论次数 class=link_comments 
style="BACKGROUND-IMAGE: url(../images/skin-type-icon-yellow.png); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px -43px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 17px; MARGIN: 0px 16px 0px 5px; DISPLAY: inline-block; PADDING-RIGHT: 0px; background-size: initial; background-origin: initial; background-clip: initial"><A 
onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_pinglun'])" 
style="TEXT-DECORATION: none; COLOR: rgb(200,131,38)" 
href="http://blog.csdn.net/njafei/article/details/76551176#comments">评论</A>(0)</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN class="link_collect tracking-ad" 
style="BACKGROUND-IMAGE: url(../images/skin-type-icon-yellow.png); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px -62px; PADDING-LEFT: 17px; MARGIN: 0px 16px 0px 5px; DISPLAY: inline-block" 
data-mod="popu_171"><A 
onclick="javascript:collectArticle('panResponder%e8%af%a6%e8%a7%a3%e5%8f%8aDemo','76551176');return false;" 
title=收藏 style="TEXT-DECORATION: none; COLOR: rgb(200,131,38)" 
href="javascript:void(0);" target=_blank>收藏</A></SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN class=link_report 
style="BACKGROUND-IMAGE: url(../images/skin-type-icon-yellow.png); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px -81px; PADDING-LEFT: 17px; MARGIN: 0px 16px 0px 5px; DISPLAY: inline-block"><A 
onclick="javascript:report(76551176,2);return false;" title=举报 
style="TEXT-DECORATION: none; COLOR: rgb(200,131,38)" 
href="http://blog.csdn.net/njafei/article/details/76551176#report">举报</A></SPAN></DIV></DIV>
<DIV class="category clearfix" 
style='FONT-SIZE: 12px; FONT-FAMILY: "microsoft yahei"; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(237,237,237) 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px; FONT-STYLE: normal; PADDING-TOP: 5px; PADDING-LEFT: 20px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px -20px; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 20px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal'>
<DIV class=category_l 
style="FONT-SIZE: 14px; WIDTH: 70px; FLOAT: left; COLOR: rgb(51,51,51); DISPLAY: inline-block; LINE-HEIGHT: 28px"><IMG 
style="BORDER-TOP: medium none; BORDER-RIGHT: medium none; VERTICAL-ALIGN: middle; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none" 
src="http://static.blog.csdn.net/images/category_icon.jpg"><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN 
style="VERTICAL-ALIGN: middle; DISPLAY: inline-block">分类：</SPAN></DIV>
<DIV class=category_r 
style="FONT-SIZE: 14px; WIDTH: 840px; FLOAT: left; COLOR: rgb(223,52,52); DISPLAY: inline-block"><LABEL 
onclick="GetCategoryArticles('6843286','njafei','top','76551176');" 
style="CURSOR: pointer; POSITION: relative; MARGIN-LEFT: 15px; DISPLAY: inline-block; LINE-HEIGHT: 28px"><SPAN 
onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_fenlei']);">react-native<EM 
style="FONT-STYLE: normal">（8）</EM></SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN><IMG class=arrow-down 
style="BORDER-TOP: medium none; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; DISPLAY: inline" 
src="http://static.blog.csdn.net/images/arrow_triangle%20_down.jpg"></LABEL></DIV></DIV>
<DIV class=bog_copyright 
style='FONT-SIZE: 12px; FONT-FAMILY: "microsoft yahei"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 20px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal'>
<P class=copyright_p 
style="FONT-SIZE: 14px; HEIGHT: 14px; COLOR: rgb(102,102,102); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 10px; BORDER-LEFT: rgb(228,28,30) 3px solid; MARGIN: 0px; LINE-HEIGHT: 14px; PADDING-RIGHT: 0px">版权声明：本文为博主原创文章，未经博主允许不得转载。</P></DIV>
<DIV 
style='FONT-SIZE: 12px; FONT-FAMILY: "microsoft yahei"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; CLEAR: both; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal'></DIV>
<DIV 
style='FONT-SIZE: 12px; BORDER-TOP: rgb(204,204,204) 1px solid; FONT-FAMILY: "microsoft yahei"; BORDER-RIGHT: rgb(204,204,204) 1px solid; BACKGROUND: rgb(238,238,238); WHITE-SPACE: normal; WORD-SPACING: 0px; MIN-WIDTH: 200px; BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: none; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 4px; FONT-STYLE: normal; PADDING-TOP: 4px; PADDING-LEFT: 10px; BORDER-LEFT: rgb(204,204,204) 1px solid; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 10px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal'>
<P 
style="PADDING-BOTTOM: 0px; TEXT-ALIGN: right; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><SPAN 
style="FLOAT: left">目录<A title=系统根据文章中H1到H6标签自动生成文章目录 
style="TEXT-DECORATION: none" 
href="http://blog.csdn.net/njafei/article/details/76551176#">(?)</A></SPAN><A 
onclick="javascript:return openct(this);" title=展开 style="TEXT-DECORATION: none" 
href="http://blog.csdn.net/njafei/article/details/76551176#">[+]</A></P></DIV>
<DIV 
style='FONT-SIZE: 12px; FONT-FAMILY: "microsoft yahei"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; CLEAR: both; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal'></DIV>
<DIV id=article_content class="article_content tracking-ad" 
style='FONT-SIZE: 15px; FONT-FAMILY: "microsoft yahei"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(85,85,85); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 35px 0px; LETTER-SPACING: normal; LINE-HEIGHT: 35px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal' 
data-mod="popu_307" data-dsm="post">
<DIV class=markdown_views 
style='FONT-SIZE: 15px; FONT-FAMILY: "microsoft yahei"; COLOR: rgb(63,63,63)'>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">我们知道，<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>react-native</CODE>封装了一系列的组件例如<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>&lt;Touchable**&gt;</CODE>来提供触摸事件的反馈，另外<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>Button</CODE>、<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>Text</CODE>等组件也提供了简单的点击方法来给组件快速添加触摸事件。但是这些组件都是针对某个特定的效果，因其是定制的，所以可自定义、调整的部分就会很少，至多是效果有个选项。那么，如果我们希望做复杂的效果，改怎么办呢？答案是<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>panResopner</CODE>。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">先看下<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>panResponder</CODE>的说明：</P>
<BLOCKQUOTE 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 15px; PADDING-TOP: 15px; PADDING-LEFT: 20px; BORDER-LEFT: 10px solid; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 20px; border-radius: 0px 5px 5px 0px">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 1.25; PADDING-RIGHT: 0px">它可以将多点触摸操作协调成一个手势。它使得一个单点触摸可以接受更多的触摸操作，也可以用于识别简单的多点触摸手势。<SPAN 
  class=Apple-converted-space>&nbsp;</SPAN><BR 
  style="BOX-SIZING: border-box">它提供了一个对触摸响应系统响应器的可预测的包装。对于每一个处理函数，它在原生事件之外提供了一个新的gestureState对象。</P></BLOCKQUOTE>
<H1 id=触摸整体流程 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t0 target=_blank></A>触摸整体流程</H1>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">简单来说，就是它会将触摸中发生的每次事件，每次状态的转换都通过api提供出来，供开发者做深入的开发和操作。这里的状态和过程包括：</P>
<OL style="BOX-SIZING: border-box">
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">要求成为响应者</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>,
<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponderCapture</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>,
<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>,
<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponderCapture</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>,</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4</LI></UL></PRE></LI>
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">开始手势操作</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {}</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1</LI></UL></PRE></LI>
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">触摸点移动</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {} </CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1</LI></UL></PRE></LI>
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">用户放开了所有的触摸点，且此时视图已经成为了响应者</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminationRequest</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>,
<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {}</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2</LI></UL></PRE></LI>
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">另一个组件已经成为了新的响应者，所以当前手势将被取消</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {}</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1</LI></UL></PRE></LI>
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">返回一个布尔值，决定当前组件是否应该阻止原生组件成为JS响应者（暂只支持android）</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onShouldBlockNativeResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
    <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;   
}</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3</LI></UL></PRE></LI></OL>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">&nbsp;</P>
<P>与流程相对应的方法是:</P>
<UL>
  <LI><CODE>View.props.onStartShouldSetResponder: (evt) =&gt; true</CODE>: 
  在用户开始触摸的时候（手指刚刚接触屏幕的瞬间），是否愿意成为响应者？</LI>
  <LI><CODE>View.props.onMoveShouldSetResponder: (evt) =&gt; 
  true</CODE>:如果View不是响应者，那么在每一个触摸点开始移动（没有停下也没有离开屏幕）时再询问一次：是否愿意响应触摸交互呢？</LI></UL>
<P>如果View返回true，并开始尝试成为响应者，那么会触发下列事件之一:</P>
<UL>
  <LI><CODE>View.props.onResponderGrant: (evt) =&gt; 
  {}</CODE>:View现在要开始响应触摸事件了。这也是需要做高亮的时候，使用户知道他到底点到了哪里。</LI>
  <LI><CODE>View.props.onResponderReject: (evt) =&gt; 
  {}</CODE>:响应者现在“另有其人”而且暂时不会“放权”，请另作安排。</LI></UL>
<P>如果View已经开始响应触摸事件了，那么下列这些处理函数会被一一调用：</P>
<UL>
  <LI><CODE>View.props.onResponderMove: (evt) =&gt; 
  {}</CODE>:用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。</LI>
  <LI><CODE>View.props.onResponderRelease: (evt) =&gt; 
  {}</CODE>:触摸操作结束时触发，比如"touchUp"（手指抬起离开屏幕）。</LI>
  <LI><CODE>View.props.onResponderTerminationRequest: (evt) =&gt; 
  true</CODE>:有其他组件请求接替响应者，当前的View是否“放权”？返回true的话则释放响应者权力。</LI>
  <LI><CODE>View.props.onResponderTerminate: (evt) =&gt; 
  {}</CODE>:响应者权力已经交出。这可能是由于其他View通过onResponderTerminationRequest请求的，也可能是由操作系统强制夺权（比如iOS上的控制中心或是通知中心）。</LI></UL>
<P>在这里首先要注意的是，响应者只能有一个，举例来说：一个子view和一个父view。如果你希望父view能够响应子view和父view共有区域的事件的话，那么你必须使子view放弃响应，这个时候你就需要设置子view的<CODE>View.props.onResponderTerminationRequest</CODE>为true,那么子view就会执行<CODE>View.props.onResponderTerminate</CODE>方法，并放弃响应的权利，这个时候父View就可以响应事件了。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">整体的流程图是：</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" src="http://on0hv7n2x.bkt.clouddn.com/PanResopnderTouchChain.png"></P>
<H1 id=触摸事件参数 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t1 target=_blank></A>触摸事件参数</H1>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">从上面的函数就可以看到，触摸事件中，基本都包含这两个参数：</P>
<OL style="BOX-SIZING: border-box">
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">nativeEvent</P>
  <UL style="BOX-SIZING: border-box">
    <LI style="BOX-SIZING: border-box">changedTouches - 
    在上一次事件之后，所有发生变化的触摸事件的数组集合（即上一次事件后，所有移动过的触摸点）</LI>
    <LI style="BOX-SIZING: border-box">identifier - 触摸点的ID</LI>
    <LI style="BOX-SIZING: border-box">locationX - 触摸点相对于父元素的横坐标</LI>
    <LI style="BOX-SIZING: border-box">locationY - 触摸点相对于父元素的纵坐标</LI>
    <LI style="BOX-SIZING: border-box">pageX - 触摸点相对于根元素的横坐标</LI>
    <LI style="BOX-SIZING: border-box">pageY - 触摸点相对于根元素的纵坐标</LI>
    <LI style="BOX-SIZING: border-box">target - 触摸点所在的元素ID</LI>
    <LI style="BOX-SIZING: border-box">timestamp - 触摸事件的时间戳，可用于移动速度的计算</LI>
    <LI style="BOX-SIZING: border-box">touches - 当前屏幕上的所有触摸点的集合</LI></UL></LI>
  <LI style="BOX-SIZING: border-box">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">gestureState</P>
  <UL style="BOX-SIZING: border-box">
    <LI style="BOX-SIZING: border-box">stateID - 
    触摸状态的ID。在屏幕上有至少一个触摸点的情况下，这个ID会一直有效。</LI>
    <LI style="BOX-SIZING: border-box">moveX - 最近一次移动时的屏幕横坐标</LI>
    <LI style="BOX-SIZING: border-box">moveY - 最近一次移动时的屏幕纵坐标</LI>
    <LI style="BOX-SIZING: border-box">x0 - 当响应器产生时的屏幕坐标</LI>
    <LI style="BOX-SIZING: border-box">y0 - 当响应器产生时的屏幕坐标</LI>
    <LI style="BOX-SIZING: border-box">dx - 从触摸操作开始时的累计横向路程</LI>
    <LI style="BOX-SIZING: border-box">dy - 从触摸操作开始时的累计纵向路程</LI>
    <LI style="BOX-SIZING: border-box">vx - 当前的横向移动速度</LI>
    <LI style="BOX-SIZING: border-box">vy - 当前的纵向移动速度</LI>
    <LI style="BOX-SIZING: border-box">numberActiveTouches - 
  当前在屏幕上的有效触摸点的数量</LI></UL></LI></OL>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这里先给出定义，具体的每个参数的时候，会在讲触摸move的时候一起讲</P>
<H1 id=给组件添加触摸事件 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t2 target=_blank></A>给组件添加触摸事件</H1>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">给一个组件添加触摸事件很简单，有两步：</P>
<OL style="BOX-SIZING: border-box">
  <LI style="BOX-SIZING: border-box">创建一个panResponder</LI>
  <LI style="BOX-SIZING: border-box">将panResponder的panHandles传给这个组件</LI></OL>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">看下代码：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> React, {PureComponent, Component} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react'</SPAN>;
<SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    PanResponder,
} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react-native'</SPAN>;

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redViewBgColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        }
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redViewBgColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>})
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redViewBgColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>})
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                &lt;View style={[styles.redView,{<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.redViewBgColor}]}
                    {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                &gt;&lt;/View&gt;
            &lt;/View&gt;
        );
    }
}

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">const</SPAN> styles = StyleSheet.create({
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">container</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">flex</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">1</SPAN>,
    },
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redView</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
    },

});

AppRegistry.registerComponent<SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'TouchStartAndRelease'</SPAN>, () =&gt; TouchStartAndRelease)</SPAN>;</SPAN></CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">65<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">66<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">67<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">68<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">69<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">70<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">71</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onPanResponderGrant</CODE>是当用户触摸到屏幕时，我们需要给用户一个反馈，让他知道，触摸已经起作用了。这里我们将view变蓝。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onPanResponderRelease</CODE>是当用户触摸结束时，我们也要给个反馈，让用户知道触摸已经停止。这里我们将view变回红色。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">之前记得看过，之所以native比web的效果用起来好很多，就是因为native的每个步骤，都会给用户反馈，让用户知道，他的行为已经有回应了。这也是我们在做前端包括交互设计的时候，非常需要注意的事情，要知道，用户是很不耐烦的，你一定要给用户一个不太需要思考的交互，不要让他去想诸如：‘我碰到这个按钮了吗？’，‘这个是这样用的吗？’类似的问题。感兴趣的可以看下一本书《Don’t 
make me think》。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">效果如下：</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchStartAndRelease.gif"></P>
<H1 id=触摸移动 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t3 target=_blank></A>触摸移动</H1>
<H2 id=nativeevnet 
style="BOX-SIZING: border-box; FONT-SIZE: 2.13em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t4 target=_blank></A>nativeEvnet</H2>
<H3 id=locationx-loactiony 
style="BOX-SIZING: border-box; FONT-SIZE: 1.73em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t5 target=_blank></A>locationX loactionY</H3>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">我们试着在移动的时候，让view随着手指的移动而移动。这里主要需要处理onPanResponderMove函数，先试试用<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>nativeEvent</CODE>的<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>locationX</CODE>和<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>locationY</CODE>来处理，代码如下：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> React, {PureComponent, Component} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react'</SPAN>;
<SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    PanResponder,
} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react-native'</SPAN>;

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        }
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">locationX : ${evt.nativeEvent.locationX}   locationY : ${evt.nativeEvent.locationY}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: evt.nativeEvent.locationX,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: evt.nativeEvent.locationY,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        });
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>,
        });
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                &lt;View style={[styles.redView,
                    {
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft,
                    }
                ]}
                    {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                &gt;&lt;/View&gt;
            &lt;/View&gt;
        );
    }
}

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">const</SPAN> styles = StyleSheet.create({
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">container</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">flex</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">1</SPAN>,
    },
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redView</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
    },

});

AppRegistry.registerComponent<SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'TouchStartAndRelease'</SPAN>, () =&gt; TouchStartAndRelease)</SPAN>;</SPAN></CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">65<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">66<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">67<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">68<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">69<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">70<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">71<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">72<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">73<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">74<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">75<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">76<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">77<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">78<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">79<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">80<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">81<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">82<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">83<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">84<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">85<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">86</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">在实际操作中，发现<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>locationX</CODE>和<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>locationY</CODE>的移动是非常跳跃的，和api上面的介绍并不一样。查了<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>github</CODE>的<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>issues</CODE>，发现很多人提<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>locationX</CODE>在<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>android</CODE>上面不准确或者不变的bug，但这个问题没有人提，所以我就提了一个，地址是：<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
href="https://github.com/facebook/react-native/issues/15290" target=_blank>When 
I use panResponder.nativeEvent.locationX and locationY, it changes queite 
strange</A></P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">效果如下：<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR style="BOX-SIZING: border-box"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchNativeEventLocationXY.gif"></P>
<H3 id=pagex-pagey 
style="BOX-SIZING: border-box; FONT-SIZE: 1.73em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t6 target=_blank></A>pageX pageY</H3>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">ok、根据介绍，pageX和pageY是触摸点相对于根元素的横纵坐标，其效果如何呢？ 
我们将上述代码中的locationX和locationY替换为pageX和pageY.代码：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> React, {PureComponent, Component} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react'</SPAN>;
<SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    PanResponder,
} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react-native'</SPAN>;

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        }
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">pageX : ${evt.nativeEvent.pageX}   pageY : ${evt.nativeEvent.pageY}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: evt.nativeEvent.pageX,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: pageY,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        });
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>,
        });
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                &lt;View style={[styles.redView,
                    {
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft,
                    }
                ]}
                    {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                &gt;&lt;/View&gt;
            &lt;/View&gt;
        );
    }
}

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">const</SPAN> styles = StyleSheet.create({
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">container</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">flex</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">1</SPAN>,
    },
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redView</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
    },

});

AppRegistry.registerComponent<SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'TouchStartAndRelease'</SPAN>, () =&gt; TouchStartAndRelease)</SPAN>;</SPAN></CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">65<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">66<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">67<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">68<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">69<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">70<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">71<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">72<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">73<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">74<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">75<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">76<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">77<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">78<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">79<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">80<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">81<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">82<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">83<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">84<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">85<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">86</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">reload下。看下效果：</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchPageXAndPageY.gif"></P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这里发现，移动开始的时候，pageX和pageY其实会有个跳跃，但是在移动的过程中，其变化比较稳定。这里打了下log，发现本来是(100,100)的View，在点击的时候，(pageX,pageY)为（176，156）,研究了下发现是因为我的触摸点相对于view其实是有距离的，所以造成了开始的跳跃。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">接下里，我们在这个redView的外围增加一个view,看下获得的pageX和pageY是什么，代码：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        }
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">locationX : ${evt.nativeEvent.pageX}   locationY : ${evt.nativeEvent.pageY}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: evt.nativeEvent.pageX,
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: evt.nativeEvent.pageY,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        });
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>,
        });
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                &lt;View style={{<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">200</SPAN>,<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">200</SPAN>,<SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>:<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">"grey"</SPAN>}}&gt;
                    &lt;View style={[styles.redView,
                        {
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft,
                        }
                    ]}
                          {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                    &gt;&lt;/View&gt;
                &lt;/View&gt;

            &lt;/View&gt;
        );
    }
}</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">65<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">66<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">67</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">效果：<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR style="BOX-SIZING: border-box"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchNativeEventPageXInParentView.gif"></P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这里可以看到，pageX和pageY确实是当前的屏幕坐标，和其父view没有关系</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">怎么解决跳跃的问题呢？ 
目前从nativeEvent中的参数来看，是没办法解决的，所以我们继续看下gesture中的参数。（后面会给出解决方案）</P>
<H2 id=gesture 
style="BOX-SIZING: border-box; FONT-SIZE: 2.13em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t7 target=_blank></A>gesture</H2>
<H3 id=movex-movey 
style="BOX-SIZING: border-box; FONT-SIZE: 1.73em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t8 target=_blank></A>moveX moveY</H3>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这里先看下moveX 
moveY，定义是最近一次移动时的屏幕横坐标和纵坐标，从定义上讲，和nativeEvent中的pageX和pageY应该是一样的，我们看下demo。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">代码：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        }
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">gestureState.moveX : ${gestureState.moveX}   gestureState.moveY : ${gestureState.moveY}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: gestureState.moveX,
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: gestureState.moveY,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        });
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>,
        });
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                    &lt;View style={[styles.redView,
                        {
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft,
                        }
                    ]}
                          {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                    &gt;&lt;/View&gt;
            &lt;/View&gt;
        );
    }
}</CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">效果和pageX，pageY一样，这里就不贴出来截屏了。<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR 
style="BOX-SIZING: border-box">在有parentView的情况下，效果也是没有区别。</P>
<H3 id=x0-y0 
style="BOX-SIZING: border-box; FONT-SIZE: 1.73em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t9 target=_blank></A>x0 y0</H3>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">x0和y0定义写的很清楚：</P>
<BLOCKQUOTE 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 15px; PADDING-TOP: 15px; PADDING-LEFT: 20px; BORDER-LEFT: 10px solid; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 20px; border-radius: 0px 5px 5px 0px">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 1.25; PADDING-RIGHT: 0px">x0 
  - 当响应器产生时的屏幕坐标<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR 
  style="BOX-SIZING: border-box">y0 - 当响应器产生时的屏幕坐标</P></BLOCKQUOTE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">就是当响应器产生时，即可以理解为触摸开始时，触摸的屏幕坐标。所以一旦触摸产生，x0 
和 y0其实不会变了，除非这次触摸release，产生下次触摸。</P>
<H3 id=dx-dy 
style="BOX-SIZING: border-box; FONT-SIZE: 1.73em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t10 target=_blank></A>dx dy</H3>
<BLOCKQUOTE 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 15px; PADDING-TOP: 15px; PADDING-LEFT: 20px; BORDER-LEFT: 10px solid; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 20px; border-radius: 0px 5px 5px 0px">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 1.25; PADDING-RIGHT: 0px">dx 
  - 从触摸操作开始时的累计横向路程<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR 
  style="BOX-SIZING: border-box">dy - 从触摸操作开始时的累计纵向路程</P></BLOCKQUOTE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这个定义写的也蛮清楚的，就是本次触摸的累积横向路程和纵向路程。嘿、还记得上面我们遇到的问题吗？pageX、pageY 
和 
moveX、moveY都会有的问题，第一次如果不是点击左上角来移动，第一会有点跳跃，因为我们不知道当前的触摸点相对于view的坐标，所以坐标会偏移一些。<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR 
style="BOX-SIZING: border-box">有了dx和dy，我们就可以想办法解决这个问题了。我们只要记住上次这个view的left和top，然后set的时候，增加移动的距离，就解决了移动跳跃的问题了，先上代码：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> React, {PureComponent, Component} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react'</SPAN>;
<SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    PanResponder,
} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react-native'</SPAN>;

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        };
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft;
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop;
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">gestureState.dx : ${gestureState.dx}   gestureState.dy : ${gestureState.dy}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX + gestureState.dx,
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY + gestureState.dy,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft;
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        });
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>,
        });
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                    &lt;View style={[styles.redView,
                        {
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft,
                        }
                    ]}
                          {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                    &gt;&lt;/View&gt;
            &lt;/View&gt;
        );
    }
}

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">const</SPAN> styles = StyleSheet.create({
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">container</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">flex</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">1</SPAN>,
    },
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redView</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
    },

});

AppRegistry.registerComponent<SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'TouchStartAndRelease'</SPAN>, () =&gt; TouchStartAndRelease)</SPAN>;</SPAN></CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">65<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">66<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">67<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">68<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">69<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">70<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">71<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">72<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">73<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">74<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">75<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">76<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">77<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">78<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">79<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">80<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">81<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">82<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">83<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">84<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">85<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">86<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">87<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">88<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">89<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">90</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">效果：</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchGestureDxDy.gif"></P>
<H3 id=vx-vy 
style="BOX-SIZING: border-box; FONT-SIZE: 1.73em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t11 target=_blank></A>vx vy</H3>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">接下来的参数是vx和vy，这里不详细介绍，给出定义：</P>
<BLOCKQUOTE 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 15px; PADDING-TOP: 15px; PADDING-LEFT: 20px; BORDER-LEFT: 10px solid; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 20px; border-radius: 0px 5px 5px 0px">
  <P 
  style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 1.25; PADDING-RIGHT: 0px">vx 
  - 当前的横向移动速度<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR 
  style="BOX-SIZING: border-box">vy - 当前的纵向移动速度</P></BLOCKQUOTE>
<H1 id=控制触摸是否响应 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t12 target=_blank></A>控制触摸是否响应</H1>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">上面一直在讲move的时候的用法， 
下面看下如何控制是否响应</P>
<H2 id=onstartshouldsetpanresponder 
style="BOX-SIZING: border-box; FONT-SIZE: 2.13em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t13 target=_blank></A>onStartShouldSetPanResponder</H2>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这个很简单了，返回true，怎变成响应器，否则不会响应.但是当我真的去demo 
的时候，诡异的事情发生了，<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onStartShouldSetPanResponder</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>return 
false，居然view还能移动。打断点看了下，原来是因为<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onMoveShouldSetPanResponder</CODE>是true，那么其移动是正常的。所以<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onStartShouldSetPanResponder</CODE>只控制当触摸开始时，不会执行<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onPanResponderGrant</CODE>函数。但是如果发生了move，则还是会走onPanResponderGrant函数。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">上面简介的时候，还有个<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onStartShouldSetPanResponderCapture</CODE>没有介绍，这个我尝试了几种组合：</P>
<TABLE 
style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; WIDTH: 934px; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-SPACING: 0px; BORDER-LEFT: rgb(238,238,238) 1px solid; BACKGROUND-COLOR: transparent">
  <THEAD style="BOX-SIZING: border-box">
  <TR style="BOX-SIZING: border-box">
    <TH 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">onStartShouldSetPanResponder</TH>
    <TH 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">onStartShouldSetPanResponderCapture</TH>
    <TH 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">结果</TH></TR></THEAD>
  <TBODY style="BOX-SIZING: border-box">
  <TR style="BOX-SIZING: border-box">
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">true</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">true</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">work</TD></TR>
  <TR style="BOX-SIZING: border-box">
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">true</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">false</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">work</TD></TR>
  <TR style="BOX-SIZING: border-box">
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">false</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">true</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">work</TD></TR>
  <TR style="BOX-SIZING: border-box">
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">false</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">false</TD>
    <TD 
    style="BOX-SIZING: border-box; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(238,238,238) 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(238,238,238) 1px solid; LINE-HEIGHT: 20px; PADDING-RIGHT: 8px">not 
      work</TD></TR></TBODY></TABLE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这说明，只要两者有一个true，则触摸都会进入<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onPanResponderGrant</CODE>。网上搜索了下，也没有找到两者的区别。说实话，我对这里还是表示疑惑的，如果有读者知道原因，请指教。我目前怀疑是<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>react-native</CODE>的bug</P>
<H2 id=onmoveshouldsetpanresponder 
style="BOX-SIZING: border-box; FONT-SIZE: 2.13em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t14 target=_blank></A>onMoveShouldSetPanResponder</H2>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onMoveShouldSetPanResponder</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>从字面上理解，也是是否可以在移动中响应。我们先将其返回false，看下效果。居然可以移动…</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">查了github，貌似是个bug<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
href="https://github.com/facebook/react-native/issues/1046" 
target=_blank>[Touchable] How to stopPropagation touch event</A></P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">还是好多bug啊，一声叹息。。。（还是我太蠢没找到？？？）</P>
<H1 id=多层响应 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t15 target=_blank></A>多层响应</H1>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">我们先尝试，在红色区域下面加一个灰色的区域，而且实现上面的触摸移动效果：<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><BR 
style="BOX-SIZING: border-box">代码：</P><PRE class=prettyprint style='BOX-SIZING: border-box; FONT-SIZE: 14px; WORD-WRAP: break-word; BORDER-TOP: rgb(136,136,136) 0px solid; FONT-FAMILY: "Source Code Pro", monospace; BORDER-RIGHT: rgb(136,136,136) 0px solid; WHITE-SPACE: nowrap; OVERFLOW-X: auto; OVERFLOW-Y: hidden; BORDER-BOTTOM: rgb(136,136,136) 0px solid; POSITION: relative; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 60px; BORDER-LEFT: rgb(136,136,136) 0px solid; MARGIN: 0px 0px 1.1em; DISPLAY: block; LINE-HEIGHT: 1.45; PADDING-RIGHT: 5px; border-radius: 0px' name="code"><CODE class="hljs coffeescript has-numbering" style='BOX-SIZING: border-box; WORD-WRAP: normal; FONT-FAMILY: "Source Code Pro", monospace; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: block; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> React, {PureComponent, Component} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react'</SPAN>;
<SPAN class=hljs-reserved style="BOX-SIZING: border-box">import</SPAN> {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    PanResponder,
} from <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'react-native'</SPAN>;

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">export</SPAN> <SPAN class=hljs-reserved style="BOX-SIZING: border-box">default</SPAN> <SPAN class=hljs-class style="BOX-SIZING: border-box"><SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">class</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">TouchStartAndRelease</SPAN> <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">extends</SPAN> <SPAN class=hljs-title style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">PureComponent</SPAN> {</SPAN>
    constructor(props) {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">super</SPAN>(props);
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state = {
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor1</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'grey'</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop1</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft1</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        };
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft;
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop;
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX1 = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft1;
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY1 = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop1;
    }

    componentWillMount(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight();
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'highlight'</SPAN>);
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">gestureState.dx : ${gestureState.dx}   gestureState.dy : ${gestureState.dy}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX + gestureState.dx,
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY + gestureState.dy,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight();
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft;
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });

        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder1 = PanResponder.create({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onStartShouldSetPanResponder</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onMoveShouldSetPanResponder</SPAN>:  <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> <SPAN class=hljs-literal style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">true</SPAN>;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderGrant</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._highlight1();
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderMove</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-built_in style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">console</SPAN>.log(`<SPAN class=javascript style="BOX-SIZING: border-box">gestureState.dx : ${gestureState.dx}   gestureState.dy : ${gestureState.dy}</SPAN>`);
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft1</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX1 + gestureState.dx,
                    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop1</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY1 + gestureState.dy,
                });
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderRelease</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._unhighlight1();
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastX1 = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft1;
                <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.lastY1 = <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop1;
            },
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">onPanResponderTerminate</SPAN>: <SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(evt, gestureState)</SPAN> =&gt;</SPAN> {
            },
        });
    }

    _unhighlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'red'</SPAN>,
        });
    }

    _highlight(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'blue'</SPAN>,
        });
    }

    _unhighlight1(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor1</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'grey'</SPAN>,
        });
    }

    _highlight1(){
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.setState({
            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor1</SPAN>: <SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'green'</SPAN>,
        });
    }

    render() {
        <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">return</SPAN> (
            &lt;View style={styles.container}&gt;
                &lt;View style={
                    [styles.greyView,
                    {
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor1,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop1,
                        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft1,
                    }
                    ]}
                      {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder1.panHandlers}
                &gt;
                    &lt;View style={[styles.redView,
                        {
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">backgroundColor</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.backgroundColor,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginTop</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginTop,
                            <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">marginLeft</SPAN>: <SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>.state.marginLeft,
                        }
                    ]}
                          {...<SPAN class=hljs-keyword style="BOX-SIZING: border-box; COLOR: rgb(0,0,136)">this</SPAN>._panResponder.panHandlers}
                    &gt;&lt;/View&gt;
                &lt;/View&gt;
            &lt;/View&gt;
        );
    }
}

<SPAN class=hljs-reserved style="BOX-SIZING: border-box">const</SPAN> styles = StyleSheet.create({
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">container</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">flex</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">1</SPAN>,
    },
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">greyView</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">200</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">200</SPAN>,
    },
    <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">redView</SPAN>: {
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">width</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
        <SPAN class=hljs-attribute style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">height</SPAN>: <SPAN class=hljs-number style="BOX-SIZING: border-box; COLOR: rgb(0,102,102)">100</SPAN>,
    },
});

AppRegistry.registerComponent<SPAN class=hljs-function style="BOX-SIZING: border-box"><SPAN class=hljs-params style="BOX-SIZING: border-box; COLOR: rgb(102,0,102)">(<SPAN class=hljs-string style="BOX-SIZING: border-box; COLOR: rgb(0,136,0)">'TouchStartAndRelease'</SPAN>, () =&gt; TouchStartAndRelease)</SPAN>;
</SPAN></CODE><UL class=pre-numbering style="LIST-STYLE-TYPE: none; BOX-SIZING: border-box; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 50px; POSITION: absolute; PADDING-BOTTOM: 40px; TEXT-ALIGN: right; PADDING-TOP: 6px; PADDING-LEFT: 0px; LEFT: 0px; MARGIN: 0px; TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(238,238,238)"><LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">1<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">2<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">3<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">4<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">5<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">6<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">7<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">8<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">9<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">10<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">11<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">12<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">13<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">14<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">15<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">16<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">17<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">18<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">19<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">20<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">21<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">22<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">23<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">24<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">25<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">26<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">27<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">28<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">29<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">30<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">31<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">32<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">33<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">34<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">35<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">36<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">37<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">38<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">39<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">40<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">41<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">42<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">43<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">44<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">45<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">46<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">47<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">48<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">49<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">50<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">51<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">52<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">53<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">54<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">55<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">56<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">57<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">58<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">59<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">60<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">61<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">62<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">63<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">64<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">65<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">66<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">67<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">68<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">69<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">70<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">71<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">72<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">73<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">74<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">75<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">76<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">77<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">78<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">79<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">80<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">81<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">82<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">83<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">84<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">85<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">86<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">87<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">88<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">89<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">90<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">91<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">92<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">93<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">94<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">95<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">96<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">97<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">98<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">99<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">100<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">101<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">102<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">103<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">104<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">105<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">106<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">107<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">108<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">109<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">110<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">111<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">112<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">113<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">114<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">115<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">116<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">117<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">118<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">119<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">120<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">121<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">122<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">123<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">124<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">125<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">126<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">127<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">128<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">129<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">130<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">131<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">132<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">133<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">134<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">135<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">136<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">137<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">138<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">139<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">140<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">141<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">142<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">143<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">144<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">145<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">146<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">147<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">148<LI style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px">149</LI></UL></PRE>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">看下效果：</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchDoubleView.gif"></P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">点击红色区域，其变蓝，然后移动开始之后，底部的灰色也会变绿，移动发现，整体移动，相当于移动下面的区域。松开手后，上面的view不变回红色，下面的view变回灰色.只有单独点上面的view，而不移动，松开后其才会转成变回红色。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">这是为什么呢？ 
我们分别在两个view的move函数中打log，发现根本没有进入上面view的move函数。这时就要介绍下上面讲到的另一个函数了：<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onPanResponderTerminate</CODE>，我们发现，移动的时候，进入了上面view的这个函数，说明它的控制权，被抢走了。rn的多层触摸事件，我理解是从底层挨个网上查询，看哪个view想要接收，一定被接收，则消息不再传递。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">把红色view的<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onStartShouldSetPanResponder</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>onMoveShouldSetPanResponder</CODE>都返回false，发现点击红色区域的时候，灰色的区域也会有效果，和我们正常的理解也一样。效果如下：</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px"><IMG 
title="" 
style="BOX-SIZING: border-box; MAX-WIDTH: 602px; BORDER-TOP: medium none; HEIGHT: auto; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MAX-HEIGHT: 100%" 
alt="" 
src="http://on0hv7n2x.bkt.clouddn.com/Demo/Touch/TouchDoubleViewOneCannotTouch.gif"></P>
<H1 id=多点触摸 
style="BOX-SIZING: border-box; FONT-SIZE: 2.6em; FONT-WEIGHT: 100; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.8em 0px; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 0px"><A 
style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: rgb(12,137,207)" 
name=t16 target=_blank></A>多点触摸</H1>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">如果是多点触摸呢？这里就要通过nativeEvent里面的touches去处理。记得，当前活跃的panResponder只有一个，所以需要在一个responder里面取处理两个触摸。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">本篇文章到底结束，这里我们简单介绍了<CODE 
style='BOX-SIZING: border-box; FONT-SIZE: 13px; FONT-FAMILY: "Source Code Pro", monospace; WHITE-SPACE: nowrap; COLOR: rgb(63,63,63); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0px'>panResponder</CODE>的触摸事件各个阶段的处理，以及参数的使用。还是有很多的问题，如果有新的消息，我会udpate这篇blog。</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">&nbsp;</P>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">&nbsp;</P>
<DIV>
<DIV>
<H2>基本的Touch</H2>
<P>稍微有一点Android基础的人都知道，Android的触摸操作都是绑定在对应的空间上的，我们可以利用<CODE>view.setOnClickListener</CODE>,<CODE>view.setOnTouchListener</CODE>等方法响应触摸事件。Web上和Android类似，也是通过在相应的组件上添加<CODE>onClick</CODE>方法,<CODE>addEventListener</CODE>方法响应事件。React 
Native略有不同，它提供了一个<CODE>Touchable</CODE>实现,用它作为触控的组件。这就意味着你要在需要响应的View中添加一个Touch的外套才能实现原生所需要的功能。下面看代码:</P><PRE class="hljs undefined"><CODE>_onPressIn() {
    console.log("press in");
}

_onPressOut() {
    console.log("press out");
}

_onPress() {
    console.log("press");
}

_onLonePress() {
    console.log("long press");
}


render() {
    return (
      &lt;View style = {styles.container} &gt;
        &lt;TouchableHighlight
        style = {styles.touchable}
        onPressIn = {this._onPressIn}
        onPressOut = {this._onPressOut}
        onPress = {this._onPress}
        onLongPress = {this._onLonePress} &gt;
        &lt;View style = {styles.button} &gt;
        &lt;/View&gt;
        &lt;/TouchableHighlight&gt;
        &lt;/View&gt;
    );
}</CODE></PRE>
<P>在这里我们可以很明显的看到我们在需要实现点击效果的view外面加了<CODE>TouchableHightLight</CODE>组件，并在这个组件里面实现了各种触摸事件。这里的<CODE>TouchalbeHightLight</CODE>是Touch的具体实现之一，除了<CODE>TouchableHightLight</CODE>，还有其他三个组件同样实现了Touch的功能，它们的主要功能如下:</P>
<UL>
  <LI><CODE>TouchableHightLight</CODE><BR>本组件用于封装视图，使其可以正确响应触摸操作。当按下的时候，封装的视图的不透明度会降低，同时会有一个底层的颜色透过而被用户看到，使得视图变暗或变亮。在底层实现上，实际会创建一个新的视图到视图层级中，如果使用的方法不正确，有时候会导致一些不希望出现的视觉效果。譬如没有给视图的backgroundColor显式声明一个不透明的颜色。</LI>
  <LI><CODE>TouchableNativeFeedback</CODE>(仅限Android)<BR>本组件用于封装视图，使其可以正确响应触摸操作（仅限Android平台）。在Android设备上，这个组件利用原生状态来渲染触摸的反馈。目前它只支持一个单独的View实例作为子节点。个人感觉这个是为了实现Material 
  Design而出的组件，因为用这个组件可以实现Material Design点击控件时产生的涟漪效果，具体请参考<A 
  href="https://facebook.github.io/react-native/docs/touchablenativefeedback.html" 
  target=_blank>TouchableNativeFeedback</A> </LI>
  <LI><CODE>TouchableOpacity</CODE><BR>本组件用于封装视图，使其可以正确响应触摸操作。当按下的时候，封装的视图的不透明度会降低。这个过程并不会真正改变视图层级，大部分情况下很容易添加到应用中而不会带来一些奇怪的副作用。（此组件与TouchableHighlight的区别在于并没有额外的颜色变化，更适于一般场景）</LI>
  <LI><CODE>TouchableWithoutFeedback</CODE><BR>本组件用来封装视图。但除非你有一个很好的理由，否则不要用这个组件。所有能够响应触屏操作的元素在触屏后都应该有一个视觉上的反馈（然而本组件没有任何视觉反馈）。这也是为什么一个"web"应用总是显得不够"原生"的主要原因之一。</LI></UL>
<H2>响应</H2>
<P>如上所述，一般的组件需要与<CODE>Touchable</CODE>组件配合才能完整的视线触摸的操作，但是触摸之后产生的响应事件还是定义在对应的View中的。正常的响应事件流程应该是这样的:</P><PRE class="hljs undefined"><CODE>是否接受相应-&gt;响应触摸事件-&gt;释放触摸事件</CODE></PRE>
<P>与流程相对应的方法是:</P>
<UL>
  <LI><CODE>View.props.onStartShouldSetResponder: (evt) =&gt; true</CODE>: 
  在用户开始触摸的时候（手指刚刚接触屏幕的瞬间），是否愿意成为响应者？</LI>
  <LI><CODE>View.props.onMoveShouldSetResponder: (evt) =&gt; 
  true</CODE>:如果View不是响应者，那么在每一个触摸点开始移动（没有停下也没有离开屏幕）时再询问一次：是否愿意响应触摸交互呢？</LI></UL>
<P>如果View返回true，并开始尝试成为响应者，那么会触发下列事件之一:</P>
<UL>
  <LI><CODE>View.props.onResponderGrant: (evt) =&gt; 
  {}</CODE>:View现在要开始响应触摸事件了。这也是需要做高亮的时候，使用户知道他到底点到了哪里。</LI>
  <LI><CODE>View.props.onResponderReject: (evt) =&gt; 
  {}</CODE>:响应者现在“另有其人”而且暂时不会“放权”，请另作安排。</LI></UL>
<P>如果View已经开始响应触摸事件了，那么下列这些处理函数会被一一调用：</P>
<UL>
  <LI><CODE>View.props.onResponderMove: (evt) =&gt; 
  {}</CODE>:用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。</LI>
  <LI><CODE>View.props.onResponderRelease: (evt) =&gt; 
  {}</CODE>:触摸操作结束时触发，比如"touchUp"（手指抬起离开屏幕）。</LI>
  <LI><CODE>View.props.onResponderTerminationRequest: (evt) =&gt; 
  true</CODE>:有其他组件请求接替响应者，当前的View是否“放权”？返回true的话则释放响应者权力。</LI>
  <LI><CODE>View.props.onResponderTerminate: (evt) =&gt; 
  {}</CODE>:响应者权力已经交出。这可能是由于其他View通过onResponderTerminationRequest请求的，也可能是由操作系统强制夺权（比如iOS上的控制中心或是通知中心）。</LI></UL>
<P>在这里首先要注意的是，响应者只能有一个，举例来说：一个子view和一个父view。如果你希望父view能够响应子view和父view共有区域的事件的话，那么你必须使子view放弃响应，这个时候你就需要设置子view的<CODE>View.props.onResponderTerminationRequest</CODE>为true,那么子view就会执行<CODE>View.props.onResponderTerminate</CODE>方法，并放弃响应的权利，这个时候父View就可以响应事件了。</P>
<P>第二个需要注意的点就是，当两个View重叠的话需要慎用这些属性，因为这有可能会造成意想不到的效果,下面是例子:</P><PRE class="hljs undefined"><CODE>import React, {
    Component,
} from 'react';

import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    TouchableHighlight,
    PanResponder
} from 'react-native';


class demoReact extends Component {
    //构造器
    constructor(props) {
        //加载父类方法,不可省略
        super(props);
        //设置初始的状态
        this.state = {
          bg:'white',
          bg2:'white',
          top:0,
          left:0,
        };
    }

    //componentDidMount是React组件的一个生命周期方法，他会在组件刚加载完成的时候调用一次，以后不会再调用
    componentDidMount() {}

    componentWillMount(){
      this._gestureHandlers = {
        onStartShouldSetResponder: () =&gt; true,  //对触摸进行响应
        onMoveShouldSetResponder: ()=&gt; true,  //对滑动进行响应
        onResponderGrant: ()=&gt;{
          console.log("parent onResponseGrant");
          this.setState({bg: 'red'});
        }, //激活时做的动作
        onResponderMove: ()=&gt;{
          console.log("parent onResponderMove");
        },  //移动时作出的动作
        onResponderRelease: ()=&gt;{
          console.log("parent onResponseRelease");
          this.setState({bg: 'white'})
        }, //动作释放后做的动作
      }

      this._gestureHandlers2 = {
        onStartShouldSetResponder: () =&gt; true,
        onMoveShouldSetResponder: ()=&gt; true,
        onResponderTerminationRequest:() =&gt; true,
        onResponderGrant: ()=&gt;{
          console.log("child onResponseGrant");
          this.setState({bg2: 'green'});
        },
        onResponderMove: ()=&gt;{
          console.log("child onResponseMove");
        },
        onResponderRelease: ()=&gt;{
          console.log("child onResponseRelease");
          this.setState({bg2: 'white'});
        }
      }

    render() {
      return (
        &lt;View style={styles.container}&gt;
          &lt;View
            {...this._gestureHandlers}
            style={[styles.rect,{
              "backgroundColor": this.state.bg
            }]}&gt;
              &lt;View
                {...this._gestureHandlers2}
                style={[styles.rect2,{
                  "backgroundColor": this.state.bg2
                }]}
              &gt;

              &lt;/View&gt;
            &lt;/View&gt;

            &lt;/View&gt;
        &lt;/View&gt;
      );
    }

};

var styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  rect: {
    width: 200,
    height: 200,
    borderWidth: 1,
    borderColor: 'black',
    justifyContent: 'center',
    alignItems: 'center',
  },
  rect2: {
    width: 100,
    height: 100,
    borderWidth: 1,
    borderColor: 'black'
  },
  rect3:{
    width:100,
    height:100,
    borderWidth:1,
    borderColor:'black',
    backgroundColor:'#223344',
    alignSelf:'flex-end',
  }
});

AppRegistry.registerComponent('demoReact', () =&gt; demoReact);</CODE></PRE>
<P>观察上面的代码，你认为Console会如何打出日志呢？比如说，父view会不会响应事件？真实的结果是这样的:</P>
<DIV class=image-package><IMG style="CURSOR: zoom-in" 
src="http://upload-images.jianshu.io/upload_images/220959-3c62ab9cea073be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" 
data-original-src="http://upload-images.jianshu.io/upload_images/220959-3c62ab9cea073be2.png?imageMogr2/auto-orient/strip%7CimageView2/2"><BR>
<DIV class=image-caption>响应结果</DIV></DIV>
<P>因为父view虽然不是最初的响应者，但是由于父view<CODE>onMoveShouldSetResponder</CODE>设置为true，并且子view的<CODE>onResponderTerminationRequest</CODE>设置为true，这样就会导致响应者由子view变成父view。那么如果我们<CODE>onResponderTerminationRequest</CODE>设置为false呢？是不是父view就不会响应时间呢？真实的答案会让你大吃一惊的，结果是这样的:</P>
<DIV class=image-package><IMG style="CURSOR: zoom-in" 
src="http://upload-images.jianshu.io/upload_images/220959-04c0d908b4742113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" 
data-original-src="http://upload-images.jianshu.io/upload_images/220959-04c0d908b4742113.png?imageMogr2/auto-orient/strip%7CimageView2/2"><BR>
<DIV class=image-caption>响应结果</DIV></DIV>
<P>看，父view的<CODE>onResponderGrant</CODE>的方法仍然被执行到了，这是因为你将父view<CODE>onMoveShouldSetResponder</CODE>设置为true的关系，你可以再看一下此方法的定义，只有当这个值设置为false的时候，父view的<CODE>onResponderGrant</CODE>方法才不会执行。所以，当view重叠的时候一定要小心。</P>
<H2>捕获事件</H2>
<P>熟悉Android开发的人都知道，View的触摸事件是从ViewGroup往View传播的，即俗称的冒泡形式调用，当我们希望ViewGroup响应时间时，只需要将ViewGroup的<CODE>onInterceptTouchEvent</CODE>返回值设置为true就行了,React 
Native与之类似，只需要将下面的方法设置为true就行了。</P>
<UL>
  <LI><CODE>View.props.onStartShouldSetResponderCapture: (evt) =&gt; 
  true</CODE></LI>
  <LI><CODE>View.props.onMoveShouldSetResponderCapture: (evt) =&gt; 
  true</CODE></LI></UL>
<H2>PanResponder</H2>
<P>除了上面的responder，React 
Native还提供了更高级的PanResponder来处理更为复杂的触摸操作，例如多点触摸手势。对于每一个处理函数，它在原生事件之外提供了一个新的gestureState对象。gestureState对象里面的字段可以帮助我们处理更加复杂的触摸情况:</P>
<UL>
  <LI><CODE>stateID</CODE>:触摸状态的ID。在屏幕上有至少一个触摸点的情况下，这个ID会一直有效。</LI>
  <LI><CODE>moveX</CODE>:最近一次移动时的屏幕横坐标</LI>
  <LI><CODE>moveY</CODE>:最近一次移动时的屏幕纵坐标</LI>
  <LI><CODE>x0</CODE>:当响应器产生时的屏幕坐标</LI>
  <LI><CODE>y0</CODE>:当响应器产生时的屏幕坐标</LI>
  <LI><CODE>dx</CODE>:从触摸操作开始时的累计横向路程</LI>
  <LI><CODE>dy</CODE>:从触摸操作开始时的累计纵向路程</LI>
  <LI><CODE>vx</CODE>:当前的横向移动速度</LI>
  <LI><CODE>vy</CODE>:当前的纵向移动速度</LI>
  <LI><CODE>numberActiveTouches</CODE>:当前在屏幕上的有效触摸点的数量</LI></UL>
<P>而它的事件处理方法与上面类似，比如上文中的<CODE>View.props.onStartShouldSetResponder: (evt) =&gt; 
true</CODE>它的对应方法就是<CODE>onStartShouldSetPanResponder: (evt, gestureState) =&gt; 
true</CODE>.简单的例子如下:</P><PRE class="hljs undefined"><CODE>    class demoReact extends Component {
        //构造器
        constructor(props) {
            //加载父类方法,不可省略
            super(props);
            //设置初始的状态
            this.state = {
              top:0,
              left:0,
            };
        }

        //componentDidMount是React组件的一个生命周期方法，他会在组件刚加载完成的时候调用一次，以后不会再调用
        componentDidMount() {}

        componentWillMount(){
          this._panResponder = PanResponder.create({
            onStartShouldSetPanResponder: () =&gt; true,
            onMoveShouldSetPanResponder: ()=&gt; true,
            onPanResponderGrant: ()=&gt;{
              this._top = this.state.top
              this._left = this.state.left
              this.setState({bg: 'red'})
            },
            onPanResponderMove: (evt,gs)=&gt;{
              console.log(gs.dx+' '+gs.dy)
              this.setState({
                top: this._top+gs.dy,
                left: this._left+gs.dx
              })
            },
            onPanResponderRelease: (evt,gs)=&gt;{
              this.setState({
                bg: 'white',
                top: this._top+gs.dy,
                left: this._left+gs.dx
              })}
            })
        }

        render() {
          return (
            &lt;View style={styles.container}&gt;
                &lt;View
                {...this._panResponder.panHandlers}
                style={[styles.rect,{
                  "top":this.state.top,
                  "left":this.state.left,
                }]}&gt;

                &lt;/View&gt;
            &lt;/View&gt;
          );
        }

    };

    var styles = StyleSheet.create({
      container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
      },
      rect:{
        width:0,
        height:0,
        borderWidth:1,
        borderColor:'black',
        backgroundColor:'#223344',
        alignSelf:'flex-end',
      }
    });</CODE></PRE>
<H2>最后</H2></DIV></DIV>
<P 
style="BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 1.1em; PADDING-RIGHT: 0px">&nbsp;</P></DIV></DIV>
</BODY>
</HTML>

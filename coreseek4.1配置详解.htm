<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>coreseek4.1配置详解</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 11.00.9600.17728"></HEAD>
<BODY>
<P>coreseek4.1配置详解（<STRONG><FONT style="BACKGROUND-COLOR: #ff0000" 
color=#ffffff> sql_field_string = title 注意查看API title可检索，可返回原始文本信息 
</FONT></STRONG>）</P><PRE style="WORD-WRAP: break-word; BORDER-TOP: rgb(0,0,0) 1px solid; BORDER-RIGHT: rgb(0,0,0) 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(0,0,0) 1px solid; TEXT-TRANSFORM: none; COLOR: red; PADDING-BOTTOM: 0.5em; TEXT-ALIGN: left; PADDING-TOP: 0.5em; FONT: 12px/1.5em 'Courier New', Courier, monospace; PADDING-LEFT: 0.5em; MARGIN: 0px 1em 1em; BORDER-LEFT: rgb(0,0,0) 1px solid; LETTER-SPACING: normal; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(221,221,221); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT style="BACKGROUND-COLOR: #ffffff" color=#000000 size=3 face=Simsun></FONT><BR class=Apple-interchange-newline>数据表字段取值对应到Coreseek的索引中，其关系如下：

数据库：
SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, score, title, content FROM documents
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">id</B>　　　　　: 自增字段，表的主键，整数
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">group_id</B>　  : 整数字段
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">date_added</B> : 整数字段，使用UNIX_TIMESTAMP可将datetime类型转换为整数的timestamp
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">score</B>　　　 : 浮点数字段
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">title</B>　　　　: 字符串字段
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">content</B>　　 : 文本字段

业务分析：
文档编号：id
查询过滤：分组（group_id），时间（date_added），score
全文检索：title、content

Coreseek索引配置：
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">id　　　　　　</B>　　　:ID属性，必须提供，在SQL语句中字段名称不限
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　对应SQL查询的第一个字段，系统自动使用，内部属性名为@id，不需要也不能在配置中设定
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　使用SetFilter()过滤，或者使用SetIDRange()过滤；
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　SphinxSE之中，使用filter或者minid, maxid过滤

<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">sql_attr_uint</B>　　　:整数属性，以上group_id、date_added都可用此设置，使用SetFilter()过滤，
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　或者使用SetFilterRange()过滤；
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　SphinxSE之中，使用filter或者range过滤；

<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">sql_attr_float</B>　　　:浮点数属性，以上score可用此设置，使用SetFilterFloatRange()进行范围过滤，
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　SphinxSE之中，使用range过滤；

<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">sql_attr_timestamp</B>:timestamp属性，整数，以上date_added可用此设置，可用SetFilter()过滤
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　或者使用SetFilterRange()过滤；
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　SphinxSE之中，使用filter或者range过滤

<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">sql_attr_str2ordinal</B>:字符串序列属性，以上title可用此设置，仅用于根据该字段排序
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　但是设置后，该属性不可用于过滤，也不会保存实际字符串内容，更不能全文检索
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　搜索结果中，其对应的信息为整数，由系统计算出来的排序序列值

<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">全文检索字段</B>　　　:全文检索字段，以上title、content等字符串或者文本的字段都可用此设置
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　任何出现在SQL语句中，既不是ID属性，也没有使用“sql_attr_类型”设置的字段，都是全文字段，
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　使用Query()搜索；
<B style="FONT-WEIGHT: bold; COLOR: blue; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px">　　　　　　　</B>　　　SphinxSE之中，使用query的查询文本进行搜索

其他更详细和丰富的类型，请前往<A style="TEXT-DECORATION: underline; COLOR: rgb(24,80,124); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px" href="http://www.coreseek.cn/docs/coreseek_3.2-sphinx_0.9.9.html#attributes" target=_blank>中文手册</A>了解。
</PRE>
<P><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Windows操作系统下：mysql数据源配置：（对应coreseek-3.2.13-win32/etc/csft_mysql.conf）</SPAN><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></P><PRE style="WORD-WRAP: break-word; BORDER-TOP: rgb(0,0,0) 1px solid; BORDER-RIGHT: rgb(0,0,0) 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(0,0,0) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.5em; TEXT-ALIGN: left; PADDING-TOP: 0.5em; FONT: 12px/1.5em 'Courier New', Courier, monospace; PADDING-LEFT: 0.5em; MARGIN: 0px 1em 1em; BORDER-LEFT: rgb(0,0,0) 1px solid; LETTER-SPACING: normal; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(221,221,221); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">#源定义
source mysql
{
	type				= mysql    #表示使用mysql数据源

	sql_host				= localhost    #表示数据库服务器的链接地址
	sql_user				= root          #表示数据库的用户名
	sql_pass				= 123456      #表示数据库的密码
	sql_db				= test          #表示数据库的名称
	sql_port				= 3306         #表示数据库的端口
	sql_query_pre			= SET NAMES utf8

	#从数据库之中读取数据的SQL语句设置<STRONG><FONT color=#ff00ff>（把指定的表字段读取到sphinx中：var\data\mysql.xx）</FONT></STRONG>
	sql_query				= SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content FROM documents
										#sql_query第一列id需为整数，且被系统使用，无需再设置sql_attr_uint

	#使用sql_attr设置的字段，只能作为属性，使用SphinxClient::SetFilter()进行过滤；未被设置的字段，自动作为全文检索的字段，使用SphinxClient::Query("搜索字符串")进行全文搜索；
	#title、content作为字符串/文本字段，被全文索引<STRONG><FONT color=#ff00ff>(在下面不被列出的字段将被索引，并且不会被返回，除非sql_field_string指定返回字段)</FONT></STRONG>
	
	sql_attr_uint			= group_id				   #从SQL读取到的值必须为整数；sql_attr_uint表示该字段是数值属性
	sql_attr_timestamp		= date_added      #从SQL读取到的值必须为整数，作为时间属性；sql_attr_timestamp表示该字段是时间属性；可以不用该配置</PRE><PRE style="WORD-WRAP: break-word; BORDER-TOP: rgb(0,0,0) 1px solid; BORDER-RIGHT: rgb(0,0,0) 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(0,0,0) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.5em; TEXT-ALIGN: left; PADDING-TOP: 0.5em; FONT: 12px/1.5em 'Courier New', Courier, monospace; PADDING-LEFT: 0.5em; MARGIN: 0px 1em 1em; BORDER-LEFT: rgb(0,0,0) 1px solid; LETTER-SPACING: normal; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(221,221,221); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><STRONG><FONT style="BACKGROUND-COLOR: #ff0000" color=#ffffff>sql_field_string = title #返回的字段</FONT></STRONG>
    sql_query_info_pre      = SET NAMES utf8                                        #命令行查询时，设置正确的字符集，3.2.14开始支持
	sql_query_info			= SELECT * FROM documents WHERE id=$id  #命令行查询时，从数据库读取原始数据信息
}

#index定义
index mysql
{
    source            = mysql             #对应的source名称
    path            = var/data/mysql #索引存放的位置，路径为var/data
    docinfo            = extern
    mlock            = 0
    morphology        = none
    min_word_len        = 1
    html_strip                = 0
    #charset_dictpath = /usr/local/mmseg3/etc/    #BSD、Linux环境下设置，/符号结尾
    charset_dictpath = etc/ #Windows环境下设置，/符号结尾
    charset_type        = zh_cn.utf-8

}
</PRE>
<P><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">BSD、Linux操作系统下：mysql数据源配置：（对应coreseek-3.2.13/testpack/etc/csft_mysql.conf）</SPAN><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><BR 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 12px/12px Verdana, Geneva, Arial, Helvetica, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></P><PRE style="WORD-WRAP: break-word; BORDER-TOP: rgb(0,0,0) 1px solid; BORDER-RIGHT: rgb(0,0,0) 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(0,0,0) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.5em; TEXT-ALIGN: left; PADDING-TOP: 0.5em; FONT: 12px/1.5em 'Courier New', Courier, monospace; PADDING-LEFT: 0.5em; MARGIN: 0px 1em 1em; BORDER-LEFT: rgb(0,0,0) 1px solid; LETTER-SPACING: normal; PADDING-RIGHT: 0.5em; BACKGROUND-COLOR: rgb(221,221,221); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">#源定义
source mysql
{
    type                = mysql

    sql_host                = localhost
    sql_user                = root
    sql_pass                =
    sql_db                = test
    sql_port                = 3306
    sql_query_pre            = SET NAMES utf8

    sql_query                = SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content FROM documents
                                            #sql_query第一列id需为整数
                                            #title、content作为字符串/文本字段，被全文索引
    sql_attr_uint            = group_id            #从SQL读取到的值必须为整数
    sql_attr_timestamp        = date_added      #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info_pre      = SET NAMES utf8                                        #命令行查询时，设置正确的字符集，3.2.14开始支持
    sql_query_info            = SELECT * FROM documents WHERE id=$id  #命令行查询时，从数据库读取原始数据信息
}

#index定义
index mysql
{
    source            = mysql             #对应的source名称
    path            = var/data/mysql
    docinfo            = extern
    mlock            = 0
    morphology        = none
    min_word_len        = 1
    html_strip                = 0
    charset_dictpath = /usr/local/mmseg3/etc/    #BSD、Linux环境下设置，/符号结尾
    #charset_dictpath = etc/                        #Windows环境下设置，/符号结尾
    charset_type        = zh_cn.utf-8
}
</PRE>
<P><BR class=Apple-interchange-newline>&nbsp;</P>
<P 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); TEXT-ALIGN: left; FONT: 14px/25px Georgia, 'Times New Roman', Times, sans-serif; MARGIN: 10px auto; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">sphinx的配置文件是在配置的时候最容易出错的了：</P>
<H1 
style="FONT-SIZE: 28px; FONT-FAMILY: 微软雅黑, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(255,255,255); PADDING-BOTTOM: 8px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 10px; LETTER-SPACING: normal; PADDING-RIGHT: 10px; BACKGROUND-COLOR: rgb(153,153,153); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">我们先要明白几个概念：</H1>
<UL 
style="LIST-STYLE-TYPE: disc; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/25px Georgia, 'Times New Roman', Times, sans-serif; PADDING-LEFT: 0px; MARGIN: 10px 10px 10px 45px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
  <LI 
  style="BACKGROUND-IMAGE: url(http://www.cnblogs.com/skins/Minyx2_Lite/images/icon_miniarrow.gif); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px 9px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: 0px">source：数据源，数据是从什么地方来的。<BR></LI>
  <LI 
  style="BACKGROUND-IMAGE: url(http://www.cnblogs.com/skins/Minyx2_Lite/images/icon_miniarrow.gif); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px 9px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: 0px">index：索引，当有数据源之后，从数据源处构建索引。索引实际上就是相当于一个字典检索。有了整本字典内容以后，才会有字典检索。<BR></LI>
  <LI 
  style="BACKGROUND-IMAGE: url(http://www.cnblogs.com/skins/Minyx2_Lite/images/icon_miniarrow.gif); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px 9px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: 0px">searchd：提供搜索查询服务。它一般是以deamon的形式运行在后台的。<BR></LI>
  <LI 
  style="BACKGROUND-IMAGE: url(http://www.cnblogs.com/skins/Minyx2_Lite/images/icon_miniarrow.gif); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px 9px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: 0px">indexer：构建索引的服务。当要重新构建索引的时候，就是调用indexer这个命令。<BR></LI>
  <LI 
  style="BACKGROUND-IMAGE: url(http://www.cnblogs.com/skins/Minyx2_Lite/images/icon_miniarrow.gif); BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: 0px 9px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: 0px">attr：属性，属性是存在索引中的，它不进行全文索引，但是可以用于过滤和排序。</LI></UL>
<P 
style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); TEXT-ALIGN: left; FONT: 14px/25px Georgia, 'Times New Roman', Times, sans-serif; MARGIN: 10px auto; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">sphinx的配置文件过于冗长，我们把sphinx默认的配置文件中的注释部分去掉，重新进行描述理解，就成下面的样子了：</P>
<H1 
style="FONT-SIZE: 28px; FONT-FAMILY: 微软雅黑, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: rgb(255,255,255); PADDING-BOTTOM: 8px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 10px; LETTER-SPACING: normal; PADDING-RIGHT: 10px; BACKGROUND-COLOR: rgb(153,153,153); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">配置文件</H1><PRE style="WORD-WRAP: break-word; MARGIN-BOTTOM: 10px; FONT-SIZE: 14px; FONT-VARIANT: normal; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(51,51,51); FONT-STYLE: normal; TEXT-ALIGN: left; MARGIN-TOP: 10px; LETTER-SPACING: normal; LINE-HEIGHT: 25px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=" hljs nix" style="FONT-SIZE: 12px !important; BORDER-TOP: rgb(204,204,204) 1px solid; FONT-FAMILY: 'Courier New', sans-serif !important; BORDER-RIGHT: rgb(204,204,204) 1px solid; BACKGROUND: rgb(255,255,255); OVERFLOW-X: auto; BORDER-BOTTOM: rgb(204,204,204) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px !important; PADDING-TOP: 5px !important; PADDING-LEFT: 5px !important; BORDER-LEFT: rgb(204,204,204) 1px solid; DISPLAY: block; LINE-HEIGHT: 1.5 !important; PADDING-RIGHT: 5px !important; border-radius: 3px"><SPAN class=hljs-comment style="COLOR: green">## 数据源src1</SPAN>
source src1
{
	<SPAN class=hljs-comment style="COLOR: green">## 说明数据源的类型。数据源的类型可以是：mysql，pgsql，mssql，xmlpipe，odbc，python</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 有人会奇怪，python是一种语言怎么可以成为数据源呢？</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## python作为一种语言，可以操作任意其他的数据来源来获取数据，更多数据请看：（http://www.coreseek.cn/products-install/python/）</SPAN>
	<SPAN class=hljs-variable>type			=</SPAN> mysql
	
	<SPAN class=hljs-comment style="COLOR: green">## 下面是sql数据库特有的端口，用户名，密码，数据库名等。</SPAN>
	<SPAN class=hljs-variable>sql_host		=</SPAN> localhost
	<SPAN class=hljs-variable>sql_user		=</SPAN> test
	<SPAN class=hljs-variable>sql_pass		=</SPAN>
	<SPAN class=hljs-variable>sql_db			=</SPAN> test
	<SPAN class=hljs-variable>sql_port		=</SPAN> <SPAN class=hljs-number>3306</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 如果是使用unix sock连接可以使用这个。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_sock		= /tmp/mysql.sock</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## indexer和mysql之间的交互，需要考虑到效率和安全性。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 比如考虑到效率，他们两者之间的交互需要使用压缩协议；考虑到安全，他们两者之间的传输需要使用ssl</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 那么这个参数就代表这个意思，0/32/2048/32768  无/使用压缩协议/握手后切换到ssl/Mysql 4.1版本身份认证。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mysql_connect_flags	= 32</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 当mysql_connect_flags设置为2048（ssl）的时候，下面几个就代表ssl连接所需要使用的几个参数。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mysql_ssl_cert		= /etc/ssl/client-cert.pem</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mysql_ssl_key		= /etc/ssl/client-key.pem</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mysql_ssl_ca		= /etc/ssl/cacert.pem</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## mssql特有，是否使用windows登陆</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mssql_winauth		= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## mssql特有，是使用unicode还是单字节数据。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mssql_unicode		= 1 # request Unicode data from server</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## odbc的dsn串</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># odbc_dsn		= DBQ=C:\data;DefaultDir=C:\data;Driver={Microsoft Text Driver (*.txt; *.csv)};</SPAN>
	
	<SPAN class=hljs-comment style="COLOR: green">## sql某一列的缓冲大小，一般是针对字符串来说的。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 为什么要有这么一种缓冲呢？</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 有的字符串，虽然长度很长，但是实际上并没有使用那么长的字符，所以在Sphinx并不会收录所有的字符，而是给每个属性一个缓存作为长度限制。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 默认情况下非字符类型的属性是1KB，字符类型的属性是1MB。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 而如果想要配置这个buffer的话，就可以在这里进行配置了。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_column_buffers	= content=12M, comments=1M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## indexer的sql执行前需要执行的操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_query_pre		= SET NAMES utf8</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_query_pre		= SET SESSION query_cache_type=OFF</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## indexer的sql执行语句</SPAN>
	<SPAN class=hljs-variable>sql_query		=</SPAN> \
		SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \
		FROM documents

	<SPAN class=hljs-comment style="COLOR: green">## 有的时候有多个表，我们想要查询的字段在其他表中。这个时候就需要对sql_query进行join操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 而这个join操作可能非常慢，导致建立索引的时候特别慢，那么这个时候，就可以考虑在sphinx端进行join操作了。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## sql_joined_field是增加一个字段，这个字段是从其他表查询中查询出来的。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这里封号后面的查询语句是有要求的，如果是query，则返回id和查询字段，如果是payload-query，则返回id，查询字段和权重。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 并且这里的后一个查询需要按照id进行升序排列。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_joined_field	= tags from query; SELECT docid, CONCAT('tag',tagid) FROM tags ORDER BY docid ASC</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_joined_field	= wtags from payload-query; SELECT docid, tag, tagweight FROM tags ORDER BY docid ASC</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 外部文件字段，意思就是一个表中，有一个字段存的是外部文件地址，但是实际的字段内容在文件中。比如这个字段叫做content_file_path。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 当indexer建立索引的时候，查到这个字段，就读取这个文件地址，然后加载，并进行分词和索引建立等操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_file_field		= content_file_path</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 当数据源数据太大的时候，一个sql语句查询下来往往很有可能锁表等操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 那么我么就可以使用多次查询，那么这个多次查询就需要有个范围和步长，sql_query_range和sql_range_step就是做这个使用的。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 获取最大和最小的id，然后根据步长来获取数据。比如下面的例子，如果有4500条数据，这个表建立索引的时候就会进行5次sql查询。 </SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 而5次sql查询每次的间隔时间是使用sql_ranged_rhrottle来进行设置的。单位是毫秒。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_query_range		= SELECT MIN(id),MAX(id) FROM documents</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_range_step		= 1000</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_ranged_throttle	= 0</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 下面都是些不同属性的数据了</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 先要了解属性的概念：属性是存在索引中的，它不进行全文索引，但是可以用于过滤和排序。</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## uint无符号整型属性</SPAN>
	<SPAN class=hljs-variable>sql_attr_uint		=</SPAN> group_id
	
	<SPAN class=hljs-comment style="COLOR: green">## bool属性</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_bool		= is_deleted</SPAN>
	
	<SPAN class=hljs-comment style="COLOR: green">## 长整型属性</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_bigint		= my_bigint_id</SPAN>
	
	<SPAN class=hljs-comment style="COLOR: green">## 时间戳属性，经常被用于做排序</SPAN>
	<SPAN class=hljs-variable>sql_attr_timestamp	=</SPAN> date_added

	<SPAN class=hljs-comment style="COLOR: green">## 字符串排序属性。一般我们按照字符串排序的话，我们会将这个字符串存下来进入到索引中，然后在查询的时候比较索引中得字符大小进行排序。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 但是这个时候索引就会很大，于是我们就想到了一个方法，我们在建立索引的时候，先将字符串值从数据库中取出，暂存，排序。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 然后给排序后的数组分配一个序号，然后在建立索引的时候，就将这个序号存入到索引中去。这样在查询的时候也就能完成字符串排序的操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这，就是这个字段的意义。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_str2ordinal	= author_name</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 浮点数属性，经常在查询地理经纬度的时候会用到。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_float		= lat_radians</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_float		= long_radians</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 多值属性（MVA）</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 试想一下，有一个文章系统，每篇文章都有多个标签，这个文章就叫做多值属性。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 我要对某个标签进行查询过滤，那么在建立查询的时候就应该把这个标签的值放入到索引中。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这个字段，sql_attr_multi就是用来做这个事情的。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_multi		= uint tag from query; SELECT docid, tagid FROM tags</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_multi		= uint tag from ranged-query; \</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">#	SELECT docid, tagid FROM tags WHERE id&gt;=$start AND id&lt;=$end; \</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">#	SELECT MIN(docid), MAX(docid) FROM tags</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 字符串属性。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_string		= stitle</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 文档词汇数记录属性。比如下面就是在索引建立的时候增加一个词汇数的字段</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_attr_str2wordcount	= stitle</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 字符串字段，可全文搜索，可返回原始文本信息。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_field_string	= author</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 文档词汇数记录字段，可全文搜索，可返回原始信息</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_field_str2wordcount	= title</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 取后查询，在sql_query执行后立即操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 它和sql_query_post_index的区别就是执行时间不同</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## sql_query_post是在sql_query执行后执行，而sql_query_post_index是在索引建立完成后才执行。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 所以如果要记录最后索引执行时间，那么应该在sql_query_post_index中执行。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_query_post		=</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 参考sql_query_post的说明。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_query_post_index	= REPLACE INTO counters ( id, val ) \</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">#	VALUES ( 'max_indexed_id', $maxid )</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 命令行获取信息查询。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 什么意思呢？</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 我们进行索引一般只会返回主键id，而不会返回表中的所有字段。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 但是在调试的时候，我们一般需要返回表中的字段，那这个时候，就需要使用sql_query_info。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 同时这个字段只在控制台有效，在api中是无效的。</SPAN>
	<SPAN class=hljs-variable>sql_query_info		=</SPAN> SELECT * FROM documents WHERE <SPAN class=hljs-variable>id=</SPAN>$id

	<SPAN class=hljs-comment style="COLOR: green">## 比如有两个索引，一个索引比较旧，一个索引比较新，那么旧索引中就会有数据是旧的。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 当我要对两个索引进行搜索的时候，哪些数据要按照新的索引来进行查询呢。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这个时候就使用到了这个字段了。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这里的例子（http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html#conf-sql-query-killlist）给的非常清晰了。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># sql_query_killlist	= SELECT id FROM documents WHERE edited&gt;=@last_reindex</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 下面几个压缩解压的配置都是为了一个目的：让索引重建的时候不要影响数据库的性能表现。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## SQL数据源解压字段设置</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># unpack_zlib		= zlib_column</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## MySQL数据源解压字段设置</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># unpack_mysqlcompress	= compressed_column</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># unpack_mysqlcompress	= compressed_column_2</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## MySQL数据源解压缓冲区设置</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># unpack_mysqlcompress_maxsize	= 16M</SPAN>


	<SPAN class=hljs-comment style="COLOR: green">## xmlpipe的数据源就是一个xml文档</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># type			= xmlpipe</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 读取数据源的命令</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># xmlpipe_command		= cat /home/yejianfeng/instance/coreseek/var/test.xml</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 字段</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># xmlpipe_field		= subject</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># xmlpipe_field		= content</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 属性</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># xmlpipe_attr_timestamp	= published</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># xmlpipe_attr_uint	= author_id</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## UTF-8修复设置</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 只适用xmlpipe2数据源，数据源中有可能有非utf-8的字符，这个时候解析就有可能出现问题</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 如果设置了这个字段，非utf-8序列就会全部被替换为空格。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># xmlpipe_fixup_utf8	= 1</SPAN>
}

<SPAN class=hljs-comment style="COLOR: green">## sphinx的source是有继承这么一种属性的，意思就是除了父source之外，这个source还有这个特性</SPAN>
source src1throttled : src1
{
	<SPAN class=hljs-variable>sql_ranged_throttle	=</SPAN> <SPAN class=hljs-number>100</SPAN>
}

<SPAN class=hljs-comment style="COLOR: green">## 索引test1</SPAN>
index test1
{
	<SPAN class=hljs-comment style="COLOR: green">## 索引类型，包括有plain，distributed和rt。分别是普通索引/分布式索引/增量索引。默认是plain。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># type			= plain</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 索引数据源</SPAN>
	<SPAN class=hljs-variable>source			=</SPAN> src1
	<SPAN class=hljs-comment style="COLOR: green">## 索引文件存放路径</SPAN>
	<SPAN class=hljs-variable>path			=</SPAN> /home/yejianfeng/instance/coreseek/var/data/test1

	<SPAN class=hljs-comment style="COLOR: green">## 文档信息的存储模式，包括有none,extern,inline。默认是extern。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## docinfo指的就是数据的所有属性（field）构成的一个集合。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 首先文档id是存储在一个文件中的（spa）</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 当使用inline的时候，文档的属性和文件的id都是存放在spa中的，所以进行查询过滤的时候，不需要进行额外操作。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 当使用extern的时候，文档的属性是存放在另外一个文件（spd）中的，但是当启动searchd的时候，会把这个文件加载到内存中。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## extern就意味着每次做查询过滤的时候，除了查找文档id之外，还需要去内存中根据属性进行过滤。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 但是即使这样，extern由于文件大小小，效率也不低。所以不是有特殊要求，一般都是使用extern</SPAN>
	<SPAN class=hljs-variable>docinfo			=</SPAN> extern

	<SPAN class=hljs-comment style="COLOR: green">## 缓冲内存锁定。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## searchd会讲spa和spi预读取到内存中。但是如果这部分内存数据长时间没有访问，则它会被交换到磁盘上。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 设置了mlock就不会出现这个问题，这部分数据会一直存放在内存中的。</SPAN>
	<SPAN class=hljs-variable>mlock			=</SPAN> <SPAN class=hljs-number>0</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 词形处理器</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 词形处理是什么意思呢？比如在英语中，dogs是dog的复数，所以dog是dogs的词干，这两个实际上是同一个词。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 所以英语的词形处理器会讲dogs当做dog来进行处理。</SPAN>
	<SPAN class=hljs-variable>morphology		=</SPAN> none

	<SPAN class=hljs-comment style="COLOR: green">## 词形处理有的时候会有问题，比如将gps处理成gp，这个设置可以允许根据词的长度来决定是否要使用词形处理器。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># min_stemming_len	= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 词形处理后是否还要检索原词？</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># index_exact_words	= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 停止词，停止词是不被索引的词。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># stopwords		= /home/yejianfeng/instance/coreseek/var/data/stopwords.txt</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 自定义词形字典</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># wordforms		= /home/yejianfeng/instance/coreseek/var/data/wordforms.txt</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 词汇特殊处理。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 有的一些特殊词我们希望把它当成另外一个词来处理。比如，c++ =&gt; cplusplus来处理。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># exceptions		= /home/yejianfeng/instance/coreseek/var/data/exceptions.txt</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 最小索引词长度，小于这个长度的词不会被索引。</SPAN>
	<SPAN class=hljs-variable>min_word_len		=</SPAN> <SPAN class=hljs-number>1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 字符集编码类型，可以为sbcs,utf-8。对于Coreseek，还可以有zh_cn.utf-8,zh_ch.gbk,zh_ch.big5</SPAN>
	<SPAN class=hljs-variable>charset_type		=</SPAN> sbcs

	<SPAN class=hljs-comment style="COLOR: green">## 字符表和大小写转换规则。对于Coreseek，这个字段无效。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># 'sbcs' default value is</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># charset_table		= 0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">#</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># 'utf-8' default value is</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># charset_table		= 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 忽略字符表。在忽略字符表中的前后词会被连起来当做一个单独关键词处理。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># ignore_chars		= U+00AD</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 是否启用通配符，默认为0，不启用</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># enable_star		= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## min_prefix_len,min_infix_len,prefix_fields,infix_fields都是在enable_star开启的时候才有效果。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 最小前缀索引长度</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 为什么要有这个配置项呢？</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 首先这个是当启用通配符配置启用的前提下说的，前缀索引使得一个关键词产生了多个索引项，导致索引文件体积和搜索时间增加巨大。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 那么我们就有必要限制下前缀索引的前缀长度，比如example，当前缀索引长度设置为5的时候，它只会分解为exampl，example了。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># min_prefix_len		= 0</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 最小索引中缀长度。理解同上。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># min_infix_len		= 0</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 前缀索引和中缀索引字段列表。并不是所有的字段都需要进行前缀和中缀索引。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># prefix_fields		= filename</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># infix_fields		= url, domain</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 词汇展开</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 是否尽可能展开关键字的精确格式或者型号形式</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># expand_keywords		= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## N-Gram索引的分词技术</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## N-Gram是指不按照词典，而是按照字长来分词，这个主要是针对非英文体系的一些语言来做的（中文、韩文、日文）</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 对coreseek来说，这两个配置项可以忽略。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># ngram_len		= 1</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># ngram_chars		= U+3000..U+2FA1F</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 词组边界符列表和步长</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 哪些字符被看做分隔不同词组的边界。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># phrase_boundary		= ., ?, !, U+2026 # horizontal ellipsis</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># phrase_boundary_step	= 100</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 混合字符列表</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># blend_chars		= +, &amp;, U+23</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># blend_mode		= trim_tail, skip_pure</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## html标记清理，是否从输出全文数据中去除HTML标记。</SPAN>
	<SPAN class=hljs-variable>html_strip		=</SPAN> <SPAN class=hljs-number>0</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## HTML标记属性索引设置。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># html_index_attrs	= img=alt,title; a=title;</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 需要清理的html元素</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># html_remove_elements	= style, script</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## searchd是预先打开全部索引还是每次查询再打开索引。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># preopen			= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 字典文件是保持在磁盘上还是将他预先缓冲在内存中。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># ondisk_dict		= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 由于在索引建立的时候，需要建立临时文件和和副本，还有旧的索引</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这个时候磁盘使用量会暴增，于是有个方法是临时文件重复利用</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 这个配置会极大减少建立索引时候的磁盘压力，代价是索引建立速度变慢。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># inplace_enable		= 1</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># inplace_hit_gap		= 0 # preallocated hitlist gap size</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># inplace_docinfo_gap	= 0 # preallocated docinfo gap size</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># inplace_reloc_factor	= 0.1 # relocation buffer size within arena</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># inplace_write_factor	= 0.1 # write buffer size within arena</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 在经过过短的位置后增加位置值</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># overshort_step		= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 在经过 停用词 处后增加位置值</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># stopword_step		= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 位置忽略词汇列表</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># hitless_words		= all</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># hitless_words		= hitless.txt</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 是否检测并索引句子和段落边界</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># index_sp			= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 字段内需要索引的HTML/XML区域的标签列表</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># index_zones		= title, h*, th</SPAN>
}

index test1stemmed : test1
{
	<SPAN class=hljs-variable>path			=</SPAN> /home/yejianfeng/instance/coreseek/var/data/test1stemmed
	<SPAN class=hljs-variable>morphology		=</SPAN> stem_en
}

index dist1
{
	<SPAN class=hljs-variable>type			=</SPAN> distributed

	<SPAN class=hljs-variable>local			=</SPAN> test1
	<SPAN class=hljs-variable>local			=</SPAN> test1stemmed

	<SPAN class=hljs-comment style="COLOR: green">## 分布式索引（distributed index）中的远程代理和索引声明</SPAN>
	<SPAN class=hljs-variable>agent			=</SPAN> localhost:<SPAN class=hljs-number>9313</SPAN>:remote1
	<SPAN class=hljs-variable>agent			=</SPAN> localhost:<SPAN class=hljs-number>9314</SPAN>:remote2,remote3
	<SPAN class=hljs-comment style="COLOR: green"># agent			= /var/run/searchd.sock:remote4</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 分布式索引（ distributed index）中声明远程黑洞代理</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># agent_blackhole		= testbox:9312:testindex1,testindex2</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 远程代理的连接超时时间</SPAN>
	<SPAN class=hljs-variable>agent_connect_timeout	=</SPAN> <SPAN class=hljs-number>1000</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 远程查询超时时间</SPAN>
	<SPAN class=hljs-variable>agent_query_timeout	=</SPAN> <SPAN class=hljs-number>3000</SPAN>
}

index rt
{
	<SPAN class=hljs-variable>type			=</SPAN> rt

	<SPAN class=hljs-variable>path			=</SPAN> /home/yejianfeng/instance/coreseek/var/data/rt

	<SPAN class=hljs-comment style="COLOR: green">## RT索引内存限制</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># rt_mem_limit		= 512M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 全文字段定义</SPAN>
	<SPAN class=hljs-variable>rt_field		=</SPAN> title
	<SPAN class=hljs-variable>rt_field		=</SPAN> content

	<SPAN class=hljs-comment style="COLOR: green">## 无符号整数属性定义</SPAN>
	<SPAN class=hljs-variable>rt_attr_uint		=</SPAN> gid

	<SPAN class=hljs-comment style="COLOR: green">## 各种属性定义</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># rt_attr_bigint		= guid</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># rt_attr_float		= gpa</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># rt_attr_timestamp	= ts_added</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># rt_attr_string		= author</SPAN>
}

indexer
{
	<SPAN class=hljs-comment style="COLOR: green">## 建立索引的时候，索引内存限制</SPAN>
	<SPAN class=hljs-variable>mem_limit		=</SPAN> <SPAN class=hljs-number>32</SPAN>M

	<SPAN class=hljs-comment style="COLOR: green">## 每秒最大I/O操作次数，用于限制I/O操作</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># max_iops		= 40</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 最大允许的I/O操作大小，以字节为单位，用于I/O节流</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># max_iosize		= 1048576</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 对于XMLLpipe2数据源允许的最大的字段大小，以字节为单位</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># max_xmlpipe2_field	= 4M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 写缓冲区的大小，单位是字节</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># write_buffer		= 1M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 文件字段可用的最大缓冲区大小，字节为单位</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># max_file_field_buffer	= 32M</SPAN>
}

<SPAN class=hljs-comment style="COLOR: green">## 搜索服务配置</SPAN>
searchd
{
	<SPAN class=hljs-comment style="COLOR: green"># listen			= 127.0.0.1</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># listen			= 192.168.0.1:9312</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># listen			= 9312</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># listen			= /var/run/searchd.sock</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 监听端口</SPAN>
	<SPAN class=hljs-variable>listen			=</SPAN> <SPAN class=hljs-number>9312</SPAN>
	<SPAN class=hljs-variable>listen			=</SPAN> <SPAN class=hljs-number>9306</SPAN>:mysql41

	<SPAN class=hljs-comment style="COLOR: green">## 监听日志</SPAN>
	<SPAN class=hljs-variable>log			=</SPAN> /home/yejianfeng/instance/coreseek/var/log/searchd.log

	<SPAN class=hljs-comment style="COLOR: green">## 查询日志</SPAN>
	<SPAN class=hljs-variable>query_log		=</SPAN> /home/yejianfeng/instance/coreseek/var/log/query.log

	<SPAN class=hljs-comment style="COLOR: green">## 客户端读超时时间 </SPAN>
	<SPAN class=hljs-variable>read_timeout		=</SPAN> <SPAN class=hljs-number>5</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 客户端持久连接超时时间，即客户端读一次以后，持久连接，然后再读一次。中间这个持久连接的时间。</SPAN>
	<SPAN class=hljs-variable>client_timeout		=</SPAN> <SPAN class=hljs-number>300</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 并行执行搜索的数目</SPAN>
	<SPAN class=hljs-variable>max_children		=</SPAN> <SPAN class=hljs-number>30</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 进程id文件</SPAN>
	<SPAN class=hljs-variable>pid_file		=</SPAN> /home/yejianfeng/instance/coreseek/var/log/searchd.pid

	<SPAN class=hljs-comment style="COLOR: green">## 守护进程在内存中为每个索引所保持并返回给客户端的匹配数目的最大值</SPAN>
	<SPAN class=hljs-variable>max_matches		=</SPAN> <SPAN class=hljs-number>1000</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 无缝轮转。防止 searchd 轮换在需要预取大量数据的索引时停止响应</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 当进行索引轮换的时候，可能需要消耗大量的时间在轮换索引上。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 但是启动了无缝轮转，就以消耗内存为代价减少轮转的时间</SPAN>
	<SPAN class=hljs-variable>seamless_rotate		=</SPAN> <SPAN class=hljs-number>1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 索引预开启，是否强制重新打开所有索引文件</SPAN>
	<SPAN class=hljs-variable>preopen_indexes		=</SPAN> <SPAN class=hljs-number>1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 索引轮换成功之后，是否删除以.old为扩展名的索引拷贝</SPAN>
	<SPAN class=hljs-variable>unlink_old		=</SPAN> <SPAN class=hljs-number>1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 属性刷新周期</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 就是使用UpdateAttributes()更新的文档属性每隔多少时间写回到磁盘中。</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># attr_flush_period	= 900</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 索引字典存储方式</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># ondisk_dict_default	= 1</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 用于多值属性MVA更新的存储空间的内存共享池大小</SPAN>
	<SPAN class=hljs-variable>mva_updates_pool	=</SPAN> <SPAN class=hljs-number>1</SPAN>M

	<SPAN class=hljs-comment style="COLOR: green">## 网络通讯时允许的最大的包的大小</SPAN>
	<SPAN class=hljs-variable>max_packet_size		=</SPAN> <SPAN class=hljs-number>8</SPAN>M

	<SPAN class=hljs-comment style="COLOR: green">## 崩溃日志文件</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># crash_log_path		= /home/yejianfeng/instance/coreseek/var/log/crash</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 每次查询允许设置的过滤器的最大个数</SPAN>
	<SPAN class=hljs-variable>max_filters		=</SPAN> <SPAN class=hljs-number>256</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 单个过滤器允许的值的最大个数</SPAN>
	<SPAN class=hljs-variable>max_filter_values	=</SPAN> <SPAN class=hljs-number>4096</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## TCP监听待处理队列长度</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># listen_backlog		= 5</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 每个关键字的读缓冲区的大小</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># read_buffer		= 256K</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 无匹配时读操作的大小</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># read_unhinted		= 32K</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 每次批量查询的查询数限制</SPAN>
	<SPAN class=hljs-variable>max_batch_queries	=</SPAN> <SPAN class=hljs-number>32</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 每个查询的公共子树文档缓存大小</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># subtree_docs_cache	= 4M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 每个查询的公共子树命中缓存大小</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># subtree_hits_cache	= 8M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 多处理模式（MPM）。 可选项；可用值为none、fork、prefork，以及threads。 默认在Unix类系统为form，Windows系统为threads。</SPAN>
	<SPAN class=hljs-variable>workers			=</SPAN> threads <SPAN class=hljs-comment style="COLOR: green"># for RT to work</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 并发查询线程数</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># dist_threads		= 4</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 二进制日志路径</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># binlog_path		= # disable logging</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># binlog_path		= /home/yejianfeng/instance/coreseek/var/data # binlog.001 etc will be created there</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 二进制日志刷新</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># binlog_flush		= 2</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 二进制日志大小限制</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># binlog_max_log_size	= 256M</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 线程堆栈</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># thread_stack			= 128K</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 关键字展开限制</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># expansion_limit		= 1000</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## RT索引刷新周期 </SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># rt_flush_period		= 900</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 查询日志格式</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 可选项，可用值为plain、sphinxql，默认为plain。 </SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># query_log_format		= sphinxql</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## MySQL版本设置</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># mysql_version_string	= 5.0.37</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 插件目录</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># plugin_dir			= /usr/local/sphinx/lib</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 服务端默认字符集</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># collation_server		= utf8_general_ci</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 服务端libc字符集</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># collation_libc_locale	= ru_RU.UTF-8</SPAN>

	<SPAN class=hljs-comment style="COLOR: green">## 线程服务看守</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># watchdog				= 1</SPAN>
	<SPAN class=hljs-comment style="COLOR: green">## 兼容模式</SPAN>
	<SPAN class=hljs-comment style="COLOR: green"># compat_sphinxql_magics	= 1</SPAN>
}</CODE></PRE></BODY></HTML>

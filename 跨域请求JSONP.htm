<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>跨域请求JSONP</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 8.00.6001.23580"></HEAD>
<BODY>
<P>主域内子域跨域数据访问：</P>
<P>a.xxx.com\a.html和b.xxx.com\b.html</P>
<P>在不同的页面头部加入<FONT color=#333333 size=2 face=Arial>&lt;script&gt;</FONT><FONT 
color=#cc0000 size=2 face=Arial>document.domain</FONT><SPAN 
style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 13px/20px arial; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">="xxx.com"<SPAN 
class=Apple-converted-space>&nbsp;&lt;/script&gt;</SPAN></SPAN></P>
<P>跨域请求JSONP</P>
<P>$.ajax({<BR>&nbsp;&nbsp;<A 
href="'json/test.php'">url:'json/test.php'</A>,<BR>&nbsp;&nbsp;dataType:"jsonp",<BR>&nbsp;&nbsp;jsonp:"jsonpcallback",<BR>&nbsp;&nbsp;success:function(data){<BR>&nbsp;&nbsp;&nbsp;var 
$ul = 
$("&lt;ul&gt;&lt;/ul&gt;");<BR>&nbsp;&nbsp;&nbsp;$.each(data,function(i,v){<BR>&nbsp;&nbsp;&nbsp;$("&lt;li/&gt;").text(v.id 
+ " " + 
v.name).appendTo($ul)<BR>&nbsp;&nbsp;});<BR>&nbsp;&nbsp;&nbsp;$("#res").append($ul);<BR>&nbsp;&nbsp;}<BR>&nbsp;}); 
</P>
<P><FONT 
color=#ff0000>请求的地址就是：json/test.php?jsonpcallback=xxxxxxxx</FONT>&nbsp;&nbsp;&nbsp;&nbsp; 
xx为jq自动生成的函数名</P>
<P>&lt;div id='res'&gt;&lt;/div&gt; </P>
<P>&nbsp;</P>
<P>&lt;?php<BR>if (isset($_GET['jsonpcallback'])){<BR>echo 
$_GET['jsonpcallback']."([{id:1,name:'aaaa1'},{id:2,name:'bbbb2'}])";<BR>exit;<BR>}<BR>?&gt; 
</P>
<P><FONT color=#ff0000><SPAN 
class=note>'输出js脚本执行jQuery注册回调函数，参数为json对象</SPAN><BR><SPAN 
class=note>'如果我们不理会jq发送的回调函数名称，而是直接输出json数据，这样是获取不到json数据的</SPAN></FONT></P>
<P>原理：<SPAN 
id=more-203></SPAN><BR>1.jQuery会把它封装成myurl?callback=?的形式（callback这个字段可以自己改，用$.ajax里面jsonp这个字段，详情请查看官方API），其中callback=?的问号会由jQuery生成的一个随机函数名来代替（假设这个随机的函数名是 
‘jquery123456789’），jquery会把这个jquery123456789的方法绑定到window对象下。</P>
<P>2.然后发送包含这个函数名的请求给服务器。如myurl?callback=jquery123456789</P>
<P>3.服务器检查请求里的参数，找到第一个callback，截取它的函数名jquery12345679。</P>
<P>4.服务器将生成的JSON数据以script tag的方式传参到方法里面：</P><PRE>   jquery123456789({msg:"hello"});
</PRE>
<P>这样就生成了一段 js 语法的文档，返回给客户端。</P>
<P>5.客户端浏览器，解析script标签，并执行返回的 javascript ，此时获得数据作为参数，传入到了客户端预先定义好的 callback 
函数(也就是window.jquery123456789(data))里。（动态执行回调函数）</P>
<P>&nbsp;</P>
<P><FONT style="BACKGROUND-COLOR: #ff0000" size=7>跨域表单提交</FONT></P>
<P><FONT size=3><BR>&lt;script type="text/javascript" 
src="Math.uuid.js"&gt;&lt;/script&gt;<FONT 
style="BACKGROUND-COLOR: #ffcc00">&lt;!--生成唯一ID--&gt;<BR></FONT>&lt;script 
type="text/javascript" src="jquery.min.js"&gt;&lt;/script&gt;</FONT></P>
<P><FONT size=3>&lt;form id="editForm" action="<A 
href="http://192.168.199.198:3000/new_version/headico/upload4">http://192.168.199.198:3000/new_version/headico/upload4</A>" 
method="post" target="upEditVal"&gt;</FONT></P>
<P><FONT size=3>&nbsp;&nbsp;&nbsp; &lt;input type="file" name="uploadfile" 
/&gt;<BR>&nbsp;&nbsp;&nbsp; &lt;input type="hidden" name="uploadId" 
class="uploadId_editForm"/&gt;<BR>&nbsp;&nbsp;&nbsp; &lt;button type="button" 
id="editSubmitBtn"&gt;提交&lt;/button&gt;<BR>&lt;/form&gt;</FONT></P>
<P>$("#editSubmitBtn").click(function(){<BR>&nbsp;&nbsp;&nbsp;var $this = 
$(this);<BR>&nbsp;&nbsp;&nbsp;var uuid_editForm = 
Math.uuid();<BR>&nbsp;&nbsp;&nbsp;$(".uploadId_editForm").val(uuid_editForm);<BR>&nbsp;&nbsp;&nbsp;$('&lt;iframe 
name="upEditVal"&nbsp; style="display: 
none"&gt;&lt;/iframe&gt;').insertAfter($this).on('load', 
function(){<BR>&nbsp;&nbsp;&nbsp;&nbsp;var $iframe = 
$(this);<BR>&nbsp;&nbsp;&nbsp;&nbsp;var r1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;function 
jp1(){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dtd = $.Deferred(); 
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
type:'GET',<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A 
href="'http://192.168.199.198:3000/new_version/headico/upload5'">url:'http://192.168.199.198:3000/new_version/headico/upload5'</A>,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
dataType:"jsonp",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
data:{'uploadId':uuid_editForm},<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
success:function(data){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//console.log(data);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r1 = 
data;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
dtd.resolve();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
dtd.promise(); 
<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;$.when(jp1()).done(function(){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(r1.sucess);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$iframe.unbind('load');<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$iframe.remove();<BR>&nbsp;&nbsp;&nbsp;&nbsp;});<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;});<BR>&nbsp;&nbsp;&nbsp;$("#editForm").submit();<BR>&nbsp;&nbsp;});</P>
<P><FONT 
style="BACKGROUND-COLOR: #ff9900">//原理：服务器端接收到IFRAME提交的表单数据后处理完，必须返回数据（可随机数据），触发IFRAME的onload事件，执行回调操作再次请求获取返回数据</FONT></P>
<P>&nbsp;</P>
<P><FONT style="BACKGROUND-COLOR: #339966"></FONT>&nbsp;</P>
<P>&nbsp;</P>
<P><SPAN style="FONT-SIZE: 14px">说到AJAX就会不可避免的面临两个问题，<SPAN 
style="COLOR: #0000ff">第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？</SPAN>这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">但到目前为止最被推崇或者说首选的方案还是<SPAN 
style="COLOR: #0000ff">用JSON来传数据，靠JSONP来跨域</SPAN>。而这就是本文将要讲述的内容。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px"></SPAN>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">JSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事儿：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息</SPAN>传递双方约定的方法。</P>
<P>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">既然随便聊聊，那我们就不再采用教条的方式来讲述，而是把关注重心放在帮助开发人员理解是否应当选择使用以及如何使用上。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">小小的广告一下，该篇文章是在自己群里与Sencha Touch 
2的开发者们一起探讨ST2数据交互模型时有感而发写出来的</SPAN><SPAN style="FONT-SIZE: 14px">，<STRONG 
style="COLOR: #0000ff">因此如果您对Mobile Web App开发有兴趣的话，欢迎加入</STRONG><STRONG 
style="COLOR: #0000ff"><SPAN lang=EN-US>Sencha Touch&nbsp;</SPAN>交流&nbsp;<SPAN 
lang=EN-US>QQ&nbsp;</SPAN>群&nbsp;<SPAN 
lang=EN-US>213119459&nbsp;</SPAN>。</STRONG></SPAN></P>
<P><SPAN style="FONT-SIZE: 14px"></SPAN>&nbsp;</P>
<P>
<TABLE 
style="BORDER-BOTTOM: white 0px solid; BORDER-LEFT: white 0px solid; BACKGROUND-COLOR: #276998; WIDTH: 100%; FONT-FAMILY: 微软雅黑; HEIGHT: 40px; COLOR: #fff; FONT-SIZE: 20px; BORDER-TOP: white 0px solid; BORDER-RIGHT: white 0px solid" 
border=0 cellPadding=2>
  <TBODY>
  <TR>
    <TD>&nbsp;<SPAN 
  style="COLOR: #ffffff; FONT-SIZE: 18pt">什么是JSON？</SPAN></TD></TR></TBODY></TABLE></P>
<P>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。</SPAN></P>
<P>&nbsp;</P>
<P><SPAN style="FONT-SIZE: 16px"><STRONG><SPAN 
style="COLOR: #800000">JSON的优点：</SPAN></STRONG></SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">1、基于纯文本，跨平台传递极其简单；</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">2、Javascript原生支持，后台语言几乎全部支持；</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">3、轻量级数据格式，占用字符数量极少，特别适合互联网传递；</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">4、可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">5、容易编写和解析，当然前提是你要知道数据结构；</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">JSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。</SPAN></P>
<P>&nbsp;</P>
<P><STRONG><SPAN 
style="COLOR: #800000; FONT-SIZE: 16px">JSON的格式或者叫规则：</SPAN></STRONG></P>
<P><SPAN 
style="FONT-SIZE: 14px">JSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">1、JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号""是定义符。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">2、大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">3、上述两种集合中若有多个子项，则通过英文逗号,进行分隔。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">4、键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号""，以便于不同语言的解析。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">5、JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 
这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。</SPAN></P>
<P>&nbsp;</P>
<P><SPAN style="FONT-SIZE: 16px"><STRONG><SPAN 
style="COLOR: #800000">JSON实例：</SPAN></STRONG></SPAN></P>
<DIV class=cnblogs_code>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV><PRE><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000"> 描述一个人</SPAN>

<SPAN style="COLOR: #0000ff">var</SPAN> person =<SPAN style="COLOR: #000000"> {
    </SPAN>"Name": "Bob"<SPAN style="COLOR: #000000">,
    </SPAN>"Age": 32<SPAN style="COLOR: #000000">,
    </SPAN>"Company": "IBM"<SPAN style="COLOR: #000000">,
    </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">true</SPAN><SPAN style="COLOR: #000000">
}

</SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000"> 获取这个人的信息</SPAN>

<SPAN style="COLOR: #0000ff">var</SPAN> personAge =<SPAN style="COLOR: #000000"> person.Age;

</SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000"> 描述几个人</SPAN>

<SPAN style="COLOR: #0000ff">var</SPAN> members =<SPAN style="COLOR: #000000"> [
    {
        </SPAN>"Name": "Bob"<SPAN style="COLOR: #000000">,
        </SPAN>"Age": 32<SPAN style="COLOR: #000000">,
        </SPAN>"Company": "IBM"<SPAN style="COLOR: #000000">,
        </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">true</SPAN><SPAN style="COLOR: #000000">
    },
    {
        </SPAN>"Name": "John"<SPAN style="COLOR: #000000">,
        </SPAN>"Age": 20<SPAN style="COLOR: #000000">,
        </SPAN>"Company": "Oracle"<SPAN style="COLOR: #000000">,
        </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">
    },
    {
        </SPAN>"Name": "Henry"<SPAN style="COLOR: #000000">,
        </SPAN>"Age": 45<SPAN style="COLOR: #000000">,
        </SPAN>"Company": "Microsoft"<SPAN style="COLOR: #000000">,
        </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">
    }
]

</SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000"> 读取其中John的公司名称</SPAN>

<SPAN style="COLOR: #0000ff">var</SPAN> johnsCompany = members[1<SPAN style="COLOR: #000000">].Company;

</SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000"> 描述一次会议</SPAN>

<SPAN style="COLOR: #0000ff">var</SPAN> conference =<SPAN style="COLOR: #000000"> {
    </SPAN>"Conference": "Future Marketing"<SPAN style="COLOR: #000000">,
    </SPAN>"Date": "2012-6-1"<SPAN style="COLOR: #000000">,
    </SPAN>"Address": "Beijing"<SPAN style="COLOR: #000000">,
    </SPAN>"Members"<SPAN style="COLOR: #000000">: 
    [
        {
            </SPAN>"Name": "Bob"<SPAN style="COLOR: #000000">,
            </SPAN>"Age": 32<SPAN style="COLOR: #000000">,
            </SPAN>"Company": "IBM"<SPAN style="COLOR: #000000">,
            </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">true</SPAN><SPAN style="COLOR: #000000">
        },
        {
            </SPAN>"Name": "John"<SPAN style="COLOR: #000000">,
            </SPAN>"Age": 20<SPAN style="COLOR: #000000">,
            </SPAN>"Company": "Oracle"<SPAN style="COLOR: #000000">,
            </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">
        },
        {
            </SPAN>"Name": "Henry"<SPAN style="COLOR: #000000">,
            </SPAN>"Age": 45<SPAN style="COLOR: #000000">,
            </SPAN>"Company": "Microsoft"<SPAN style="COLOR: #000000">,
            </SPAN>"Engineer": <SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">
        }
    ]
}

</SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000"> 读取参会者Henry是否工程师</SPAN>

<SPAN style="COLOR: #0000ff">var</SPAN> henryIsAnEngineer = conference.Members[2].Engineer;</PRE>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV></DIV>
<P>&nbsp;</P>
<P><SPAN style="FONT-SIZE: 14px">关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。</SPAN></P>
<P>&nbsp;</P>
<P>
<TABLE 
style="BORDER-BOTTOM: white 0px solid; BORDER-LEFT: white 0px solid; BACKGROUND-COLOR: #276998; WIDTH: 100%; FONT-FAMILY: 微软雅黑; HEIGHT: 40px; COLOR: #fff; FONT-SIZE: 20px; BORDER-TOP: white 0px solid; BORDER-RIGHT: white 0px solid" 
border=0 cellPadding=2>
  <TBODY>
  <TR>
    <TD>&nbsp;<SPAN 
  style="COLOR: #ffffff; FONT-SIZE: 18pt">什么是JSONP？</SPAN></TD></TR></TBODY></TABLE></P>
<P>&nbsp;</P>
<P><SPAN style="FONT-SIZE: 16px"><STRONG><SPAN 
style="COLOR: #800000">先说说JSONP是怎么产生的：</SPAN></STRONG></SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有"src"这个属性的标签都拥有跨域的能力，比如&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;）；</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作 
JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住 
JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。</SPAN></P>
<P><BR><BR></P>
<P><SPAN style="FONT-SIZE: 16px"><STRONG><SPAN 
style="COLOR: #800000">JSONP的客户端具体实现：</SPAN></STRONG></SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</SPAN></P>
<P>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</SPAN></P>
<DIV class=cnblogs_code><PRE>alert('我是远程文件');</PRE></DIV>
<P><SPAN 
style="FONT-SIZE: 14px">本地服务器localserver.com下有个jsonp.html页面代码如下：</SPAN></P>
<DIV class=cnblogs_code>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV><PRE><SPAN style="COLOR: #0000ff">&lt;!</SPAN><SPAN style="COLOR: #ff00ff">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">html </SPAN><SPAN style="COLOR: #ff0000">xmlns</SPAN><SPAN style="COLOR: #0000ff">="http://www.w3.org/1999/xhtml"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;&lt;/</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">script </SPAN><SPAN style="COLOR: #ff0000">type</SPAN><SPAN style="COLOR: #0000ff">="text/javascript"</SPAN><SPAN style="COLOR: #ff0000"> src</SPAN><SPAN style="COLOR: #0000ff">="http://remoteserver.com/remote.js"</SPAN><SPAN style="COLOR: #0000ff">&gt;&lt;/</SPAN><SPAN style="COLOR: #800000">script</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>

<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">html</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN></PRE>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV></DIV>
<P><SPAN style="FONT-SIZE: 14px">毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</SPAN></P>
<P>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">jsonp.html页面代码如下：</SPAN></P>
<DIV class=cnblogs_code>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV><PRE><SPAN style="COLOR: #0000ff">&lt;!</SPAN><SPAN style="COLOR: #ff00ff">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">html </SPAN><SPAN style="COLOR: #ff0000">xmlns</SPAN><SPAN style="COLOR: #0000ff">="http://www.w3.org/1999/xhtml"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;&lt;/</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">script </SPAN><SPAN style="COLOR: #ff0000">type</SPAN><SPAN style="COLOR: #0000ff">="text/javascript"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">    var</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> localHandler </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">=</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">function</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">(data){
        alert(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">+</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> data.result);
    };
    </SPAN><SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">script</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">script </SPAN><SPAN style="COLOR: #ff0000">type</SPAN><SPAN style="COLOR: #0000ff">="text/javascript"</SPAN><SPAN style="COLOR: #ff0000"> src</SPAN><SPAN style="COLOR: #0000ff">="http://remoteserver.com/remote.js"</SPAN><SPAN style="COLOR: #0000ff">&gt;&lt;/</SPAN><SPAN style="COLOR: #800000">script</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>

<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">html</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN></PRE>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV></DIV>
<P><SPAN style="FONT-SIZE: 14px">remote.js文件代码如下：</SPAN></P>
<DIV class=cnblogs_code><PRE>localHandler({"result":"我是远程js带来的数据"});</PRE></DIV>
<P><SPAN 
style="FONT-SIZE: 14px">运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px"></SPAN>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px">看jsonp.html页面的代码：</SPAN></P>
<DIV class=cnblogs_code>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV><PRE><SPAN style="COLOR: #0000ff">&lt;!</SPAN><SPAN style="COLOR: #ff00ff">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">html </SPAN><SPAN style="COLOR: #ff0000">xmlns</SPAN><SPAN style="COLOR: #0000ff">="http://www.w3.org/1999/xhtml"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;&lt;/</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">script </SPAN><SPAN style="COLOR: #ff0000">type</SPAN><SPAN style="COLOR: #0000ff">="text/javascript"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
    <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">//</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000"> 得到航班信息查询结果后的回调函数</SPAN>
    <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">var</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> flightHandler </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">=</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">function</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">(data){
        alert(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">你查询的航班结果是：票价 </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">+</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> data.price </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">+</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> 元，</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">+</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">余票 </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">+</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> data.tickets </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">+</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> 张。</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">);
    };
    </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">//</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000"> 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</SPAN>
    <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">var</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> url </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">=</SPAN> <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">;
    </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">//</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000"> 创建script标签，设置其属性</SPAN>
    <SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">var</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> script </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">=</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000"> document.createElement(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">script</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">);
    script.setAttribute(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">src</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">, url);
    </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">//</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000"> 把script标签加入head，此时调用开始</SPAN>
<SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">    document.getElementsByTagName(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">head</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">)[</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">0</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">].appendChild(script); 
    </SPAN><SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">script</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>

<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">html</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN></PRE>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV></DIV>
<P><SPAN 
style="FONT-SIZE: 14px">这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：</SPAN></P>
<DIV class=cnblogs_code><PRE><SPAN style="COLOR: #000000">flightHandler({
    </SPAN>"code": "CA1998"<SPAN style="COLOR: #000000">,
    </SPAN>"price": 1780<SPAN style="COLOR: #000000">,
    </SPAN>"tickets": 5<SPAN style="COLOR: #000000">
});</SPAN></PRE></DIV>
<P><SPAN 
style="FONT-SIZE: 14px">我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px"></SPAN>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</SPAN></P>
<P><SPAN 
style="FONT-SIZE: 14px">什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</SPAN></P>
<DIV class=cnblogs_code>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV><PRE><SPAN style="COLOR: #0000ff">&lt;!</SPAN><SPAN style="COLOR: #ff00ff">DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
 <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">html </SPAN><SPAN style="COLOR: #ff0000">xmlns</SPAN><SPAN style="COLOR: #0000ff">="http://www.w3.org/1999/xhtml"</SPAN> <SPAN style="COLOR: #0000ff">&gt;</SPAN>
 <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
     <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>Untitled Page<SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">title</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
      <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">script </SPAN><SPAN style="COLOR: #ff0000">type</SPAN><SPAN style="COLOR: #0000ff">="text/javascript"</SPAN><SPAN style="COLOR: #ff0000"> src</SPAN><SPAN style="COLOR: #0000ff">=jquery.min.js"</SPAN><SPAN style="COLOR: #0000ff">&gt;&lt;/</SPAN><SPAN style="COLOR: #800000">script</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
      <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">script </SPAN><SPAN style="COLOR: #ff0000">type</SPAN><SPAN style="COLOR: #0000ff">="text/javascript"</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">
     jQuery(document).ready(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">function</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">(){ <BR>        $.ajax({
             type: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">get</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">,
             async: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">false</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">,
             url: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">,
             dataType: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">jsonp</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">,
             jsonp: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">callback</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">,</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">//</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</SPAN>
<SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">             jsonpCallback:</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"flightHandler</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">"</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">,</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">//</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #008000">自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</SPAN>
<SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">             success: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">function</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">(json){
                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">
             },
             error: </SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #0000ff">function</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">(){
                 alert(</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">fail</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">'</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">);
             }
         });
</SPAN><SPAN style="BACKGROUND-COLOR: #f5f5f5; COLOR: #000000">     });
     </SPAN><SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">script</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
     <SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">head</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
  <SPAN style="COLOR: #0000ff">&lt;</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
  <SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">body</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN>
 <SPAN style="COLOR: #0000ff">&lt;/</SPAN><SPAN style="COLOR: #800000">html</SPAN><SPAN style="COLOR: #0000ff">&gt;</SPAN></PRE>
<DIV class=cnblogs_code_toolbar><SPAN class=cnblogs_code_copy><A title=复制代码 
onclick=copyCnblogsCode(this) href="javascript:void(0);"><IMG alt=复制代码 
src="http://common.cnblogs.com/images/copycode.gif"></A></SPAN></DIV></DIV>
<P><SPAN 
style="FONT-SIZE: 14px">是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp 
归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px"></SPAN>&nbsp;</P>
<P><SPAN 
style="FONT-SIZE: 14px">好啦，写到这里，我已经无力再写下去，又困又累，得赶紧睡觉。朋友们要是看这不错，觉得有启发，给点个“推荐”呗！由于实在比较简单，所以就不再提供demo源码下载了。</SPAN></P>
<P><SPAN style="FONT-SIZE: 14px"></SPAN>&nbsp;</P>
<P>
<TABLE 
style="BORDER-BOTTOM: white 0px solid; BORDER-LEFT: white 0px solid; BACKGROUND-COLOR: #276998; WIDTH: 100%; FONT-FAMILY: 微软雅黑; HEIGHT: 40px; COLOR: #fff; FONT-SIZE: 20px; BORDER-TOP: white 0px solid; BORDER-RIGHT: white 0px solid" 
border=0 cellPadding=2>
  <TBODY>
  <TR>
    <TD>&nbsp;<SPAN 
    style="COLOR: #ffffff; FONT-SIZE: 18pt">4月20日下午的补充：</SPAN></TD></TR></TBODY></TABLE></P>
<P><SPAN style="COLOR: #ff0000; FONT-SIZE: 14px"><STRONG><SPAN 
lang=EN-US></SPAN></STRONG></SPAN>&nbsp;</P>
<P><SPAN style="COLOR: #000000; FONT-SIZE: 14px"><SPAN 
lang=EN-US>没想到上了博客园的头条推荐。看到大家对这篇文章的认可和评论，还是很开心的，这里针对ajax与jsonp的异同再做一些补充说明：</SPAN></SPAN></P>
<P><SPAN style="COLOR: #000000; FONT-SIZE: 14px"><SPAN 
lang=EN-US>1、ajax和jsonp这两种技术在调用方式上<SPAN 
style="COLOR: #0000ff">“看起来”</SPAN>很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</SPAN></SPAN></P>
<P><SPAN style="COLOR: #000000; FONT-SIZE: 14px"><SPAN 
lang=EN-US>2、但ajax和jsonp其实本质上是不同的东西。<SPAN 
style="COLOR: #0000ff">ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加&lt;script&gt;标签来调用服务器提供的js脚本</SPAN>。</SPAN></SPAN></P>
<P><SPAN style="COLOR: #000000; FONT-SIZE: 14px"><SPAN 
lang=EN-US>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</SPAN></SPAN></P>
<P><SPAN style="COLOR: #000000; FONT-SIZE: 14px"><SPAN 
lang=EN-US>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</SPAN></SPAN></P>
<P><SPAN style="COLOR: #000000; FONT-SIZE: 14px"><SPAN 
lang=EN-US>总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</SPAN></SPAN></P>
<P><SPAN style="COLOR: #ff0000; FONT-SIZE: 14px"><SPAN lang=EN-US><FONT 
color=#000000 size=3></FONT></SPAN></SPAN>&nbsp;</P></BODY></HTML>
